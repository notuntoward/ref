/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KeepSidianPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian9 = require("obsidian");

// src/google/keep/import.ts
var import_obsidian2 = require("obsidian");

// src/config.ts
var KEEPSIDIAN_SERVER_URL = "https://keepsidianserver-i55qr5tvea-uc.a.run.app";

// src/google/keep/note.ts
function normalizeDate(dateString) {
  if (!dateString) {
    return null;
  }
  const date = new Date(dateString);
  return isNaN(date.getTime()) ? null : date;
}
function normalizeNote(note) {
  var _a, _b;
  const normalizedNote = {
    title: ((_a = note.title) == null ? void 0 : _a.trim()) || "",
    text: ((_b = note.text) == null ? void 0 : _b.trim()) || "",
    created: normalizeDate(note.created) || null,
    updated: normalizeDate(note.updated) || null,
    archived: note.archived || false,
    trashed: note.trashed || false,
    labels: Array.isArray(note.labels) ? note.labels : [],
    blobs: Array.isArray(note.blobs) ? note.blobs : [],
    blob_urls: Array.isArray(note.blob_urls) ? note.blob_urls : [],
    blob_names: Array.isArray(note.blob_names) ? note.blob_names : [],
    media: Array.isArray(note.media) ? note.media : [],
    header: note.header || "",
    body: "",
    frontmatter: "",
    frontmatterDict: {}
  };
  const [frontmatter, body, frontmatterDict] = extractFrontmatter(note.text || "");
  normalizedNote.frontmatter = frontmatter;
  normalizedNote.body = body;
  normalizedNote.frontmatterDict = frontmatterDict;
  return normalizedNote;
}
function extractFrontmatter(text) {
  let body = text;
  let frontmatter = "";
  let frontmatterDict = {};
  const splitText = text == null ? void 0 : text.split("---");
  if (splitText && splitText.length > 2) {
    frontmatter = splitText[1].trim();
    body = splitText[2].trim();
  }
  const frontmatter_parts = frontmatter == null ? void 0 : frontmatter.split("\n");
  if (frontmatter) {
    frontmatterDict = frontmatter_parts.reduce((acc, item) => {
      const [key, value] = item.split(": ");
      if (key && value) {
        const pascalKey = key.replace(/(^|-)([a-z])/g, (match, p1, p2) => p2.toUpperCase());
        acc[pascalKey] = value.trim();
      }
      return acc;
    }, {});
  }
  return [frontmatter, body, frontmatterDict];
}

// src/google/keep/import.ts
var import_obsidian3 = require("obsidian");

// src/google/keep/compare.ts
function getUpdatedFileInfo(incomingNote) {
  return {
    content: incomingNote.body,
    createdDate: incomingNote.created,
    updatedDate: incomingNote.updated
  };
}
async function getExistingFileInfo(noteFilePath, app) {
  const existingContent = await app.vault.adapter.read(noteFilePath);
  const [, existingBody, existingFrontMatterDict] = extractFrontmatter(existingContent);
  const existingCreatedDate = normalizeDate(existingFrontMatterDict.GoogleKeepCreatedDate);
  const existingUpdatedDate = normalizeDate(existingFrontMatterDict.GoogleKeepUpdatedDate);
  const existingLastSyncedDate = normalizeDate(existingFrontMatterDict.KeepSidianLastSyncedDate);
  const fsCreatedDateTimeStamp = await app.vault.adapter.stat(noteFilePath).then((stat) => stat == null ? void 0 : stat.ctime);
  const fsUpdatedDateTimeStamp = await app.vault.adapter.stat(noteFilePath).then((stat) => stat == null ? void 0 : stat.mtime);
  const fsCreatedDate = fsCreatedDateTimeStamp ? new Date(fsCreatedDateTimeStamp) : null;
  const fsUpdatedDate = fsUpdatedDateTimeStamp ? new Date(fsUpdatedDateTimeStamp) : null;
  return {
    // Read from noteFilePath
    content: existingBody,
    createdDate: existingCreatedDate,
    updatedDate: existingUpdatedDate,
    fsCreatedDate,
    fsUpdatedDate,
    lastSyncedDate: existingLastSyncedDate
  };
}
async function handleDuplicateNotes(saveLocation, incomingNote, app) {
  const noteFilePath = `${saveLocation}/${incomingNote.title}.md`;
  const fileExists = await app.vault.adapter.exists(noteFilePath);
  if (fileExists) {
    const updatedFileInfo = getUpdatedFileInfo(incomingNote);
    const existingFileInfo = await getExistingFileInfo(noteFilePath, app);
    return checkForDuplicateData(updatedFileInfo, existingFileInfo);
  } else {
    return "overwrite";
  }
}
function checkForDuplicateData(incomingFile, existingFile) {
  const currentDate = new Date();
  const incomingUpdatedDate = incomingFile.updatedDate || currentDate;
  const existingUpdatedDate = existingFile.fsUpdatedDate || existingFile.updatedDate || existingFile.fsCreatedDate;
  const lastSyncedDate = existingFile.lastSyncedDate || existingFile.fsCreatedDate;
  if (incomingFile.content === existingFile.content) {
    return "skip";
  }
  if (lastSyncedDate && existingUpdatedDate) {
    const incomingModified = incomingUpdatedDate > lastSyncedDate;
    const existingModified = existingUpdatedDate > lastSyncedDate;
    if (incomingModified && existingModified) {
      return "rename";
    }
    if (incomingModified && !existingModified) {
      return "overwrite";
    }
    if (!incomingModified && existingModified) {
      return "rename";
    }
    return "skip";
  }
  if (existingUpdatedDate) {
    if (incomingUpdatedDate > existingUpdatedDate) {
      return "overwrite";
    } else if (incomingUpdatedDate < existingUpdatedDate) {
      return "rename";
    } else {
      return "rename";
    }
  } else {
    return "rename";
  }
}

// src/google/keep/attachments.ts
var import_obsidian = require("obsidian");
async function processAttachments(plugin, blobUrls, saveLocation) {
  for (const blob_url of blobUrls) {
    try {
      let url;
      try {
        url = new URL(blob_url);
      } catch (e) {
        console.error(`Invalid URL format: ${blob_url}`);
        continue;
      }
      const blobResponse = await (0, import_obsidian.requestUrl)({
        url: blob_url,
        method: "GET"
      });
      const blobData = await blobResponse.arrayBuffer;
      const blobFileName = url.pathname.split("/").pop();
      if (blobFileName) {
        const blobFilePath = `${saveLocation}/media/${blobFileName}`;
        await plugin.app.vault.adapter.writeBinary(blobFilePath, blobData);
      }
    } catch (error) {
      console.error(error);
      throw new Error(`Failed to download blob from ${blob_url}.`);
    }
  }
}

// src/google/keep/import.ts
async function importGoogleKeepNotesBase(plugin, fetchFunction) {
  try {
    let offset = 0;
    const limit = 50;
    let hasError = false;
    while (!hasError) {
      try {
        const response = await fetchFunction(plugin, offset, limit);
        if (!response.notes || response.notes.length === 0) {
          break;
        }
        await processAndSaveNotes(plugin, response.notes);
        offset += limit;
      } catch (error) {
        console.error(`Error fetching notes at offset ${offset}:`, error);
        hasError = true;
      }
    }
    new import_obsidian2.Notice("Notes imported successfully.");
  } catch (error) {
    console.error(error);
    new import_obsidian2.Notice("Failed to import notes.");
  }
}
async function importGoogleKeepNotes(plugin) {
  await importGoogleKeepNotesBase(plugin, fetchNotes);
}
async function importGoogleKeepNotesWithOptions(plugin, options) {
  const featureFlags = convertOptionsToFeatureFlags(options);
  await importGoogleKeepNotesBase(
    plugin,
    (plugin2, offset, limit) => fetchNotesWithPremiumFeatures(plugin2, featureFlags, offset, limit)
  );
}
async function fetchNotes(plugin, offset = 0, limit = 100) {
  const response = await (0, import_obsidian2.requestUrl)({
    url: `${KEEPSIDIAN_SERVER_URL}/keep/sync?offset=${offset}&limit=${limit}`,
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "X-User-Email": plugin.settings.email,
      "Authorization": `Bearer ${plugin.settings.token}`
    }
  });
  return parseResponse(response);
}
async function fetchNotesWithPremiumFeatures(plugin, featureFlags, offset = 0, limit = 100) {
  const response = await (0, import_obsidian2.requestUrl)({
    url: `${KEEPSIDIAN_SERVER_URL}/keep/sync/premium?offset=${offset}&limit=${limit}`,
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "X-User-Email": plugin.settings.email,
      "Authorization": `Bearer ${plugin.settings.token}`
    },
    body: JSON.stringify({ feature_flags: featureFlags })
  });
  return parseResponse(response);
}
function parseResponse(response) {
  const result = typeof response.json === "function" ? response.json() : response.text ? JSON.parse(response.text) : response;
  return result;
}
function convertOptionsToFeatureFlags(options) {
  const featureFlags = {};
  if (options.includeNotesTerms && options.includeNotesTerms.length > 0) {
    featureFlags.filter_notes = {
      terms: options.includeNotesTerms
    };
  }
  if (options.excludeNotesTerms && options.excludeNotesTerms.length > 0) {
    featureFlags.skip_notes = {
      terms: options.excludeNotesTerms
    };
  }
  if (options.updateTitle) {
    featureFlags.suggest_title = {};
  }
  if (options.suggestTags) {
    featureFlags.suggest_tags = {
      max_tags: options.maxTags || 5,
      restrict_tags: options.limitToExistingTags || false,
      prefix: options.tagPrefix || "auto-"
    };
  }
  return featureFlags;
}
async function processAndSaveNotes(plugin, notes) {
  const saveLocation = plugin.settings.saveLocation;
  if (!await plugin.app.vault.adapter.exists(saveLocation)) {
    await plugin.app.vault.createFolder(saveLocation);
  }
  const mediaFolder = `${saveLocation}/media`;
  if (!await plugin.app.vault.adapter.exists(mediaFolder)) {
    await plugin.app.vault.createFolder(mediaFolder);
  }
  for (const note of notes) {
    await processAndSaveNote(plugin, note, saveLocation);
  }
}
async function processAndSaveNote(plugin, note, saveLocation) {
  const normalizedNote = normalizeNote(note);
  const noteTitle = normalizedNote.title;
  let noteFilePath = (0, import_obsidian3.normalizePath)(`${saveLocation}/${noteTitle}.md`);
  const lastSyncedDate = new Date().toISOString();
  const duplicateNotesAction = await handleDuplicateNotes(noteFilePath, normalizedNote, plugin.app);
  if (duplicateNotesAction === "skip") {
    return;
  } else if (duplicateNotesAction === "rename") {
    noteFilePath = noteFilePath.replace(/\.md$/, "");
    noteFilePath = `${noteFilePath}-conflict-${lastSyncedDate}.md`;
  }
  const mdFrontMatterDict = normalizedNote.frontmatterDict;
  mdFrontMatterDict.KeepSidianLastSyncedDate = lastSyncedDate;
  const mdFrontMatter = Object.entries(mdFrontMatterDict).map(([key, value]) => `${key}: ${value}`).join("\n");
  const mdContentWithSyncDate = `---
${mdFrontMatter}
---
${normalizedNote.body}`;
  await plugin.app.vault.adapter.write(noteFilePath, mdContentWithSyncDate);
  if (normalizedNote.blob_urls && normalizedNote.blob_urls.length > 0) {
    console.log("Processing attachments");
    await processAttachments(plugin, normalizedNote.blob_urls, saveLocation);
  }
}

// src/types/subscription.ts
var DEFAULT_PREMIUM_FEATURES = {
  autoSync: false,
  syncIntervalMinutes: 5,
  includeNotesTerms: [],
  excludeNotesTerms: [],
  updateTitle: false,
  suggestTags: false,
  maxTags: 5,
  tagPrefix: "",
  limitToExistingTags: false
};

// src/types/keepsidian-plugin-settings.ts
var DEFAULT_SETTINGS = {
  email: "",
  token: "",
  saveLocation: "Google Keep",
  subscriptionCache: void 0,
  premiumFeatures: DEFAULT_PREMIUM_FEATURES,
  gdriveToken: void 0,
  gdriveRefreshToken: void 0,
  gdriveSaveLocation: void 0
};

// src/components/SubscriptionSettingsTab.ts
var import_obsidian4 = require("obsidian");
var SubscriptionSettingsTab = class {
  constructor(containerEl, plugin) {
    this.containerEl = containerEl;
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.createEl("h3", { text: "Premium Features" });
    new import_obsidian4.Setting(containerEl).setName("Premium Features").setDesc("Get access to advanced features like two-way sync, title suggestions, and automatic tag creation.").addExtraButton((button) => button.setIcon("refresh").setTooltip("Check subscription status").onClick(async () => {
    }));
    if (!await this.plugin.subscriptionService.isSubscriptionActive()) {
      await this.displayInactiveSubscriber();
    } else {
      await this.displayActiveSubscriber();
      await SubscriptionSettingsTab.displayPremiumFeatures(containerEl, this.plugin);
    }
  }
  static async displayPremiumFeatures(containerEl, plugin) {
    await this.displayPremiumFeaturesLocal(containerEl, plugin, plugin.settings.premiumFeatures);
    await this.displayPremiumFeaturesServer(containerEl, plugin, plugin.settings.premiumFeatures);
  }
  static async displayPremiumFeaturesLocal(containerEl, plugin, premiumFeatureValues) {
  }
  static async displayPremiumFeaturesServer(containerEl, plugin, premiumFeatureValues) {
    new import_obsidian4.Setting(containerEl).setName("Only include notes containing").setDesc("Terms to include (comma-separated).").addText((text) => text.setPlaceholder("term1, term2, ...").setValue(premiumFeatureValues.includeNotesTerms.join(", ")).onChange(async (value) => {
      premiumFeatureValues.includeNotesTerms = value.split(",").map((k) => k.trim()).filter((k) => k);
    }));
    new import_obsidian4.Setting(containerEl).setName("Exclude notes containing").setDesc("Terms to skip (comma-separated).").addText((text) => text.setPlaceholder("term1, term2, ...").setValue(premiumFeatureValues.excludeNotesTerms.join(", ")).onChange(async (value) => {
      premiumFeatureValues.excludeNotesTerms = value.split(",").map((k) => k.trim()).filter((k) => k);
    }));
    new import_obsidian4.Setting(containerEl).setName("Smart Titles").setDesc("Suggest titles based on note content. Original title will be saved in note.").addToggle((toggle) => toggle.setValue(premiumFeatureValues.updateTitle).onChange(async (value) => {
      premiumFeatureValues.updateTitle = value;
    }));
    new import_obsidian4.Setting(containerEl).setName("Auto-Tags").setDesc("Generate tags based on note content.").addToggle((toggle) => toggle.setValue(premiumFeatureValues.suggestTags).onChange(async (value) => {
      premiumFeatureValues.suggestTags = value;
    }));
    new import_obsidian4.Setting(containerEl).setName("Maximum tags").setDesc("Maximum number of tags to generate.").addSlider((slider) => slider.setLimits(1, 10, 1).setValue(premiumFeatureValues.maxTags).onChange(async (value) => {
      premiumFeatureValues.maxTags = value;
    })).setDisabled(!premiumFeatureValues.suggestTags);
    new import_obsidian4.Setting(containerEl).setName("Tag prefix").setDesc("Prefix to identify generated tags (leave empty for none).").addText((text) => text.setValue(premiumFeatureValues.tagPrefix).setPlaceholder("auto-").onChange(async (value) => {
      premiumFeatureValues.tagPrefix = value;
    })).setDisabled(!premiumFeatureValues.suggestTags);
    new import_obsidian4.Setting(containerEl).setName("Limit to existing tags").setDesc("Only generate tags that already exist in your vault.").addToggle((toggle) => toggle.setValue(premiumFeatureValues.limitToExistingTags).onChange(async (value) => {
      premiumFeatureValues.limitToExistingTags = value;
    })).setDisabled(!premiumFeatureValues.suggestTags);
  }
  async displayInactiveSubscriber() {
    const { containerEl } = this;
    containerEl.createEl("h4", { text: "Why Subscribe?" });
    const benefitsList = containerEl.createEl("ul", { attr: { style: "font-size: 0.9em" } });
    [
      "Smart Titles: Auto-suggestions from note content.",
      "Auto-Tags: Instant tag generation & management.",
      "Advanced Filters: Sync only what you need.",
      "Priority Support: Your questions answered first.",
      "Two-Way Sync: Keep notes updated, Coming soon.",
      "Early Access: First to get new features.",
      "And more!"
    ].forEach((benefit) => {
      const li = benefitsList.createEl("li");
      const [title, description] = benefit.split(":");
      if (description) {
        li.createSpan({ text: title, attr: { style: "font-weight: bold" } });
        li.createSpan({ text: ":" + description });
      } else {
        li.createSpan({ text: benefit });
      }
    });
    new import_obsidian4.Setting(containerEl).setName("Subscribe Now").setDesc("Get access to all premium features").addButton((button) => button.setButtonText("Subscribe").onClick(() => {
      window.open(`${KEEPSIDIAN_SERVER_URL}/subscribe`, "_blank");
    }));
  }
  async displayActiveSubscriber() {
    const { containerEl } = this;
    const subscriptionInfo = await this.plugin.subscriptionService.checkSubscription();
    new import_obsidian4.Setting(containerEl).setName("Subscription Status").setDesc("Active").setClass("subscription-active");
    if (subscriptionInfo == null ? void 0 : subscriptionInfo.plan_details) {
      new import_obsidian4.Setting(containerEl).setName("Plan").setDesc(subscriptionInfo.plan_details.plan_id);
    }
    if (subscriptionInfo == null ? void 0 : subscriptionInfo.metering_info) {
      new import_obsidian4.Setting(containerEl).setName("Usage").setDesc(`${subscriptionInfo.metering_info.usage} / ${subscriptionInfo.metering_info.limit} notes synced`);
    }
  }
};

// src/google/keep/token.ts
var obsidian = __toESM(require("obsidian"));
var import_obsidian5 = require("obsidian");
var sanitizeInput = (input) => {
  return input.replace(/[<>"'&]/g, (char) => {
    const entities = {
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;",
      "&": "&amp;"
    };
    return entities[char];
  });
};
var sanitizeForJS = (input) => {
  return input.replace(/[\\"']/g, "\\$&").replace(/\0/g, "\\0").replace(/\n/g, "\\n").replace(/\r/g, "\\r");
};
function isTokenResponse(obj) {
  return typeof obj === "object" && obj !== null && typeof obj.keep_token === "string";
}
async function getOAuthToken(settingsTab, plugin, retrieveTokenWebview) {
  const OAUTH_URL = "https://accounts.google.com/EmbeddedSetup";
  const GOOGLE_EMAIL = plugin.settings.email;
  const createButtonClickDetectionScript = (buttonText) => `
        (function() {
            const button = Array.from(document.querySelectorAll('button')).find(el => 
                ${buttonText.map((text) => `el.textContent.includes("${text}")`).join(" || ")}
            );
            if (button) {
                console.log("Found button.");
                button.addEventListener('click', () => console.log("buttonClicked"));
            } else {
                console.log("Button not found.");
            }
        })();
    `;
  const createOverlayScript = (title, message) => `
        (function() {
            let overlay = document.getElementById('oauth-guide-overlay');
            if (!overlay) {
                overlay = document.createElement('div');
                overlay.id = 'oauth-guide-overlay';
                Object.assign(overlay.style, {
                    position: 'fixed',
                    top: '10px',
                    right: '10px',
                    backgroundColor: 'rgba(0, 0, 0, 0.7)',
                    color: 'white',
                    padding: '20px',
                    borderRadius: '5px',
                    zIndex: '10000'
                });
                document.body.appendChild(overlay);
                const titleElement = document.createElement('h3');
                titleElement.id = 'oauth-guide-title';
                const messageElement = document.createElement('p');
                messageElement.id = 'oauth-guide-message';
                overlay.appendChild(titleElement);
                overlay.appendChild(messageElement);
            }
            document.getElementById('oauth-guide-title').textContent = '${sanitizeInput(title)}';
            document.getElementById('oauth-guide-message').textContent = '${sanitizeInput(message)}';
        })();
    `;
  const enterEmailScript = (email) => `
        (function() {
            const emailInput = document.querySelector('input[type="email"]');
            if (emailInput) {
                emailInput.value = '${sanitizeForJS(sanitizeInput(email))}';
                emailInput.dispatchEvent(new Event('input', { bubbles: true }));
                emailInput.focus();
            }
        })();
    `;
  const createDevToolsInstructionsScript = () => `
        (function() {
            const overlay = document.getElementById('oauth-guide-overlay');
            if (overlay) {
                document.getElementById('oauth-guide-title').textContent = 'Step 3 of 3: Identify the OAuth Token from Developer Tools';
                const messageElement = document.getElementById('oauth-guide-message');
                messageElement.textContent = 'Almost there! We will launch your Developer Tools momentarily. Follow the instructions below to find the OAuth Token.';

                const ol = document.createElement('ol');
                const instructions = [
                    'In the Developer Tools window, navigate to the Application Tab.',
                    'Expand the Cookies Section in the left sidebar and click google.com.',
                    'Find the cookie named "oauth_token", click it, and copy its value.',
                    'Paste the token into the field below.'
                ];

                instructions.forEach(instruction => {
                    const li = document.createElement('li');
                    li.textContent = instruction;
                    ol.appendChild(li);
                });

                messageElement.appendChild(ol);

                const input = document.createElement('input');
                input.type = 'text';
                input.placeholder = 'Paste OAuth Token here';
                input.style.width = '100%';
                input.style.marginTop = '10px';
                input.style.border = '1px solid #ccc';
                input.style.borderRadius = '5px';
                input.style.padding = '5px';
                input.style.height = '30px';
                input.style.backgroundColor = '#f0f0f0';
                input.style.opacity = '0.75';
                input.addEventListener('input', function() {
                    console.log('oauthToken: ' + this.value);
                });

                messageElement.appendChild(input);
            }
        })();
    `;
  return new Promise((resolve, reject) => {
    let intervalId;
    let messageHandler;
    let timeoutId;
    const cleanup = () => {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = void 0;
      }
      if (timeoutId) {
        clearTimeout(timeoutId);
        timeoutId = void 0;
      }
      if (messageHandler && retrieveTokenWebview) {
        retrieveTokenWebview.removeEventListener("console-message", messageHandler);
        messageHandler = void 0;
      }
    };
    const wrappedReject = (error) => {
      cleanup();
      reject(error);
    };
    (async () => {
      try {
        if (!retrieveTokenWebview) {
          throw new Error("Failed to create webview element.");
        }
        await retrieveTokenWebview.loadURL(OAUTH_URL);
        retrieveTokenWebview.show();
        let emailEntered = false;
        let stepTwoDisplayed = false;
        messageHandler = async (event) => {
          if (event.message === "buttonClicked") {
            retrieveTokenWebview.executeJavaScript(createDevToolsInstructionsScript());
            setTimeout(() => {
              retrieveTokenWebview.openDevTools();
              retrieveTokenWebview.focus();
            }, 3e3);
          } else if (event.message.startsWith("oauthToken: ")) {
            const oauthToken = event.message.split("oauthToken: ")[1];
            try {
              await exchangeOauthToken(settingsTab, plugin, oauthToken);
              cleanup();
              retrieveTokenWebview.closeDevTools();
              retrieveTokenWebview.hide();
              resolve(oauthToken);
            } catch (error) {
              wrappedReject(error);
            }
          }
        };
        retrieveTokenWebview.addEventListener("console-message", messageHandler);
        const startTime = Date.now();
        const timeout = 3e5;
        intervalId = setInterval(async () => {
          const currentUrl = retrieveTokenWebview.getURL();
          if (!emailEntered && currentUrl.includes("accounts.google.com")) {
            await retrieveTokenWebview.executeJavaScript(createOverlayScript("Step 1 of 3: Login Below.", "Please start by logging in with your Google Keep account below."));
            await retrieveTokenWebview.executeJavaScript(enterEmailScript(GOOGLE_EMAIL));
            emailEntered = true;
          }
          if (emailEntered && !stepTwoDisplayed && currentUrl.includes("embeddedsigninconsent")) {
            await retrieveTokenWebview.executeJavaScript(createOverlayScript("Step 2 of 3: Accept Service Terms.", "Great! Next, please review and agree to the terms below."));
            await new Promise((resolve2) => setTimeout(resolve2, 500));
            await retrieveTokenWebview.executeJavaScript(createButtonClickDetectionScript(["I agree", "Acepto"]));
            stepTwoDisplayed = true;
          }
          if (Date.now() - startTime >= timeout) {
            wrappedReject(new Error("Timeout: OAuth token retrieval process exceeded 5 minutes."));
          }
        }, 1e3);
        timeoutId = setTimeout(() => {
          wrappedReject(new Error("Timeout: OAuth token retrieval process exceeded 5 minutes."));
        }, 3e5);
      } catch (error) {
        wrappedReject(error);
      } finally {
        cleanup();
      }
    })();
  });
}
async function initRetrieveToken(settingsTab, plugin, retrieveTokenWebview) {
  try {
    await getOAuthToken(settingsTab, plugin, retrieveTokenWebview);
  } catch (error) {
    console.error("Failed to retrieve token:", error);
    new import_obsidian5.Notice(`Failed to retrieve token: ${error.message}`);
    throw error;
  }
}
async function exchangeOauthToken(settingsTab, plugin, oauthToken) {
  try {
    const response = await obsidian.requestUrl({
      url: `${KEEPSIDIAN_SERVER_URL}/register`,
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        email: plugin.settings.email,
        oauth_token: oauthToken
      })
    });
    if (!response.status || response.status < 200 || response.status >= 300) {
      throw new Error(`Server returned status ${response.status}`);
    }
    try {
      const result = await response.json;
      if (!isTokenResponse(result)) {
        throw new Error("Invalid response format");
      }
      if (!result.keep_token) {
        throw new Error("Server response missing keep_token");
      }
      plugin.settings.token = result.keep_token;
      await plugin.saveSettings();
      settingsTab.display();
      new import_obsidian5.Notice("Token exchanged successfully.");
    } catch (e) {
      throw new Error("Failed to parse server response: " + e);
    }
  } catch (error) {
    console.error("Error exchanging OAuth token:", error);
    new import_obsidian5.Notice(`Failed to exchange OAuth token: ${error.message}`);
    throw error;
  }
}

// src/components/KeepSidianSettingsTab.ts
var import_obsidian6 = require("obsidian");
var KeepSidianSettingsTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "KeepSidian Settings" });
    this.addEmailSetting(containerEl);
    this.addSyncTokenSetting(containerEl);
    this.createRetrieveTokenWebView(containerEl);
    this.addSaveLocationSetting(containerEl);
    this.addSubscriptionSettings(containerEl);
  }
  addSubscriptionSettings(containerEl) {
    const subscriptionTab = new SubscriptionSettingsTab(
      containerEl,
      this.plugin
    );
    subscriptionTab.display();
  }
  addEmailSetting(containerEl) {
    new import_obsidian6.Setting(containerEl).setName("Email").setDesc("Your Google Keep email.").addText((text) => text.setPlaceholder("example@gmail.com").setValue(this.plugin.settings.email).onChange(async (value) => {
      this.plugin.settings.email = value;
      await this.plugin.saveSettings();
    }));
  }
  addSyncTokenSetting(containerEl) {
    new import_obsidian6.Setting(containerEl).setName("Sync token").setDesc('Your Google Keep sync token is a unique code that authorizes this plugin to access your Google Keep data. You can retrieve it by clicking the "Retrieve token" button.').addText((text) => {
      var _a;
      text.setPlaceholder("Your Google Keep sync token.").setValue(this.plugin.settings.token).onChange(async (value) => {
        this.plugin.settings.token = value;
        await this.plugin.saveSettings();
      });
      text.inputEl.addEventListener("paste", this.handleTokenPaste.bind(this));
      text.inputEl.type = "password";
      const toggleButton = (_a = text.inputEl.parentElement) == null ? void 0 : _a.createEl("button", { text: "Show" });
      toggleButton == null ? void 0 : toggleButton.addEventListener("click", (e) => {
        e.preventDefault();
        if (text.inputEl.type === "password") {
          text.inputEl.type = "text";
          toggleButton.textContent = "Hide";
        } else {
          text.inputEl.type = "password";
          toggleButton.textContent = "Show";
        }
      });
    }).addButton((button) => button.setButtonText("Retrieve token").onClick(this.handleRetrieveToken.bind(this)));
  }
  async handleTokenPaste(event) {
    var _a;
    event.preventDefault();
    const pastedText = (_a = event.clipboardData) == null ? void 0 : _a.getData("text");
    if (pastedText && pastedText.includes("oauth2_4")) {
      await exchangeOauthToken(this, this.plugin, pastedText);
      this.display();
    }
  }
  async handleRetrieveToken() {
    if (!this.plugin.settings.email || !this.isValidEmail(this.plugin.settings.email)) {
      new import_obsidian6.Notice("Please enter a valid email address before retrieving the token.");
      return;
    }
    await initRetrieveToken(this, this.plugin, this.retrieveTokenWebView);
    this.display();
  }
  addSaveLocationSetting(containerEl) {
    new import_obsidian6.Setting(containerEl).setName("Save location").setDesc("Where to save imported notes (relative to vault folder).").addText((text) => text.setPlaceholder("KeepSidian").setValue(this.plugin.settings.saveLocation).onChange(async (value) => {
      this.plugin.settings.saveLocation = value;
      await this.plugin.saveSettings();
    }));
  }
  createRetrieveTokenWebView(containerEl) {
    this.retrieveTokenWebView = containerEl.createEl("webview", {
      attr: { style: "width: 100%; height: 600px;" }
    });
    this.retrieveTokenWebView.src = "https://accounts.google.com/EmbeddedSetup";
    this.retrieveTokenWebView.setAttribute("disablewebsecurity", "true");
    this.retrieveTokenWebView.setAttribute("crossorigin", "anonymous");
    this.retrieveTokenWebView.hide();
  }
};

// src/services/subscription.ts
var import_obsidian7 = require("obsidian");
var CACHE_DURATION = 24 * 60 * 60 * 1e3;
var SubscriptionService = class {
  constructor(getEmail, getCache, setCache) {
    this.getEmail = getEmail;
    this.getCache = getCache;
    this.setCache = setCache;
  }
  async checkSubscription(forceRefresh = false) {
    const email = this.getEmail();
    if (!email) {
      return null;
    }
    const cache = this.getCache();
    if (!forceRefresh && cache && cache.email === email && Date.now() - cache.timestamp < CACHE_DURATION) {
      return cache.info;
    }
    try {
      const info = await this.fetchSubscriptionInfo(email);
      await this.setCache({
        info,
        timestamp: Date.now(),
        email
      });
      return info;
    } catch (error) {
      console.error("Failed to check subscription:", error);
      new import_obsidian7.Notice("Failed to check subscription status. Please try again later.");
      return null;
    }
  }
  async fetchSubscriptionInfo(email) {
    const response = await fetch(`${KEEPSIDIAN_SERVER_URL}/subscriber/info`, {
      method: "GET",
      headers: {
        "X-User-Email": email
      }
    });
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || "Failed to fetch subscription info");
    }
    return response.json();
  }
  async isSubscriptionActive(forceRefresh = false) {
    const info = await this.checkSubscription(forceRefresh);
    return (info == null ? void 0 : info.subscription_status) === "active";
  }
};

// src/components/NoteImportOptionsModal.ts
var import_obsidian8 = require("obsidian");
var NoteImportOptionsModal = class extends import_obsidian8.Modal {
  constructor(app, plugin, onSubmit) {
    super(app);
    this.plugin = plugin;
    this.onSubmit = onSubmit;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Import Options" });
    contentEl.createEl("p", { text: "Thanks for subscribing! Update the premium options for this import below." });
    const premiumFeatureValues = { ...this.plugin.settings.premiumFeatures };
    await SubscriptionSettingsTab.displayPremiumFeaturesServer(contentEl, this.plugin, premiumFeatureValues);
    new import_obsidian8.Setting(contentEl).addButton((btn) => btn.setButtonText("Import").setCta().onClick(() => {
      this.onSubmit(premiumFeatureValues);
      this.close();
    })).addButton((btn) => btn.setButtonText("Cancel").onClick(() => {
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var KeepSidianPlugin = class extends import_obsidian9.Plugin {
  async onload() {
    await this.loadSettings();
    this.subscriptionService = new SubscriptionService(
      () => this.settings.email,
      () => this.settings.subscriptionCache,
      async (cache) => {
        this.settings.subscriptionCache = cache;
        await this.saveSettings();
      }
    );
    this.initializeRibbonIcon();
    this.initializeCommands();
    this.initializeSettings();
  }
  initializeRibbonIcon() {
    this.addRibbonIcon("folder-sync", "Import Google Keep notes.", (evt) => {
      this.importNotes();
    });
  }
  initializeCommands() {
    this.addCommand({
      id: "import-google-keep-notes",
      name: "Import Google Keep Notes",
      callback: async () => await this.importNotes()
    });
  }
  initializeSettings() {
    this.addSettingTab(new KeepSidianSettingsTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async showImportOptionsModal() {
    return new Promise((resolve) => {
      new NoteImportOptionsModal(
        this.app,
        this,
        async (options) => {
          await importGoogleKeepNotesWithOptions(this, options);
          new import_obsidian9.Notice("Imported Google Keep notes.");
          resolve();
        }
      ).open();
    });
  }
  async importNotes() {
    try {
      const isSubscriptionActive = await this.subscriptionService.isSubscriptionActive();
      if (isSubscriptionActive) {
        await this.showImportOptionsModal();
      } else {
        await importGoogleKeepNotes(this);
        new import_obsidian9.Notice("Imported Google Keep notes.");
      }
    } catch (error) {
      new import_obsidian9.Notice("Failed to import Google Keep notes: " + error.message);
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
