{"path":"lit/lit_sources/Zakrzewski24elecPriceFrcstQRavgLib.pdf","text":"ReModels: Quantile Regression Averaging models Grzegorz Zakrzewskia, Kacper Skonieczkaa, Miko laj Ma lki´nskia, Jacek Ma´ndziuka,b aFaculty of Mathematics and Information Science, Warsaw University of Technology, Warsaw, Poland bFaculty of Computer Science, AGH University of Krakow, Krakow, Poland Abstract Electricity price forecasts play a crucial role in making key business decisions within the electricity markets. A focal point in this domain are probabilis- tic predictions, which delineate future price values in a more comprehensive manner than simple point forecasts. The golden standard in probabilistic approaches to predict energy prices is the Quantile Regression Averaging (QRA) method. In this paper, we present a Python package that encom- passes the implementation of QRA, along with modifications of this approach that have appeared in the literature over the past few years. The proposed package also facilitates the acquisition and preparation of data related to electricity markets, as well as the evaluation of model predictions. Keywords: machine learning, energy price forecasting, probabilistic forecasting, quantile regression, Quantile Regression Averaging, QRA Metadata A description of code metadata is presented in Table 1. 1. Motivation and significance In recent years, due to growing competition in electricity markets, changes in infrastructure, and the expanding presence of renewable energy sources, predicting electricity prices is an increasingly important issue in planning and operational activities of various entities. Consequently, probabilistic ap- proaches to forecasting energy prices are worth attention, as such predictions offer richer insights into future price dynamics. In certain scenarios the focus lies on forecasting the variability of future price movements rather than mere single-point predictions. Prediction intervals and density forecasts offer sup- plementary insights into the trajectory of forthcoming prices. In particular, Preprint submitted to SoftwareX May 21, 2024arXiv:2405.11372v1 [cs.LG] 18 May 2024 C1 Current code version v1.0 C2 Permanent link to code/repository used for this code version https://github.com/zakrzewow/ remodels C3 Permanent link to Reproducible Capsule / C4 Legal Code License MIT License C5 Code versioning system used git C6 Software code languages, tools, and services used python C7 Compilation requirements, operat- ing environments & dependencies python 3.8+ C8 If available Link to developer docu- mentation/manual https://remodels.readthedocs. io/en/latest/ C9 Support email for questions zakrzewski.grzegorz@outlook.com Table 1: Code metadata. they facilitate a more accurate assessment of future uncertainty and enable the formulation of various strategies that take into account the spectrum of potential outcomes determined by the interval forecast. This enhanced in- formational depth proves advantageous from multiple perspectives, including business operations, risk management, and stock market decision-making. A more detailed introduction to probabilistic forecasting of energy prices is presented in the review paper [1]. The growing interest in probabilistic energy price forecasting culminated in the international Global Energy Forecasting Competition (GEFCom2014) [2], which yielded significant outcomes. Participants were tasked with develop- ing the most effective model for predicting the 99 percentiles of future prices distribution. Notably, the Quantile Regression Averaging (QRA) method [3] emerged as the preferred approach employed by the two most successful teams. Their spectacular success accelerated the development of the QRA approach in the energy price forecasting field. Researchers continue to utilize and refine QRA, what has led to several notable improvements, including QRM [4, 5], FQRA [6, 7], FQRM [6, 7], sFQRA [6, 7], sFQRM [6, 7], LQRA [8], SQRA [9, 10] and SQRM [9, 10]. These methods expand the repertoire of techniques available for probabilistic energy price forecasting and are briefly summarized in this section. To briefly introduce the topic, quantile regression (QR) is employed to esti- mate the conditional median (or any other quantile) of the response variable. The objective of QR is to express quantiles of the response variable as a lin- ear function of explanatory variables. QR can be considered a special case 2 of linear regression (LR). The primary distinction between QR and LR lies in the cost function being optimized. Quantile regression aims to minimize the following expression: βk = argmin β∈Rn E [ρk(Y − Xβ)] (1) where βk are the model parameters for quantile k ∈ (0, 1), X is the input ma- trix and Y is the response variable. As proposed in [3], in QRA X comprises predictions of one or many point models and Y corresponds to electricity prices. The input matrix X, which is composed of point predictions of elec- tricity prices, can be obtained using any chosen method. Since electricity prices usually come in hourly frequency, one straightforward method to es- timate the future electricity price Pd,h for a specific day d and hour h is to use known prices Pd−1,h from the previous day. A more sophisticated approach would involve training an LR model on historical prices, for ex- ample incorporating variables such as prices from previous day Pd−1,h, two days prior Pd−2,h, and one week prior Pd−7,h. Obviously, a target variable in this described LR model is the unknown electricity price Pd,h. Generated point predictions form a matrix of point predictions. If only one approach was utilized, the resulting point predictions matrix X will have one column. Utilizing various models or training one model with different sets of hyper- parameters will result in a broader matrix, respectively. For each quantile k, the parameters of the QR model are estimated separately, utilizing the point predictions matrix. The calculated parameters vector βk is later used to estimate the k-th quantile of the future electricity price. As mentioned above, eight main modifications of the base QRA method have been proposed. In the first one – QRM – point predictions are averaged across rows (the time dimension) before applying QR. LQRA introduces an L1 penalty term to the QR cost function. The primary modification in FQRA and sFQRA involves utilization of Principal Component Analysis (PCA) [11] on the input point predictions matrix, along with optional averaging or stan- dardization. Lastly, the SQRA variant modifies the QR cost function by incorporating kernel density estimation, rendering it convex. A high-level summary of all 9 QRA variants is provided in Figure 1. Despite achieving state-of-the-art results in energy price forecasting, none of the referenced QRA papers has disclosed their code or the software utilized. Furthermore, no research paper offered detailed implementation instructions. Additionally, while QR is implemented in its most basic form within the scikit-learn and statsmodels Python libraries, the implementation of more advanced QRA variants is missing. In addition, although some public platforms provide data concerning energy prices, the actual datasets used for 3 Figure 1: A summary of QRA variants. Point predictions block refers to matrix of forecasts of electricity prices obtained in any chosen way, e.g. with autoregressive model trained on historical prices. Multiple series of point predictions can be prepared. Averaging involves computing the average of rows in the point predictions matrix. This average serves as the input for the next step. In the PCA block, Principal Components of the point predictions matrix are computed, with the number of utilized components being a hyper-parameter. Standardization entails scaling the rows in the point predictions matrix w.r.t. their mean and standard deviation. model training and evaluation aren’t shared explicitly, leaving room for in- consistencies in the data acquisition process performed by different research groups. Lastly, the evaluation process of developed methods necessitates the usage of custom metrics that are not available in existing tools, which may lead to discrepancies in the method assessment process. The above reasons motivated us to develop our own package, which encompasses implementa- tions of all 9 QRA variants and for their assessment on common grounds in terms of both the data and evaluation metrics used. More specifically, our package, ReModels, comprises several modules de- signed to enhance energy price forecasting research. Firstly, it enables the users to download public datasets which are commonly used in research pa- pers on the subject, ensuring transparency of the data acquisition process. 4 With the acquired data, users can undertake a series of actions: apply a variance stabilizing transformation (a data preprocessing technique), gener- ate point and probabilistic forecasts using a reference implementation from the above-mentioned set of QRA variants, improving reproducibility of exper- iments. Finally, the users can evaluate and compare the resulting predictions with dedicated metrics enabling fair and consistent evaluation. ReModels package offers a comprehensive solution for researchers focused on energy price forecasting using QRA. It enables extensive comparisons be- tween QRA variants, as well as between QRA and other probabilistic energy price forecasting techniques. Additionally, the package serves as a tool in the development of new forecasting methods going beyond the energy price forecasting field. 2. Software description 2.1. Software architecture ReModels is a Python package comprising several modules. Its underlying idea is to follow and support a standard schema of the QRA related research: 1. dataset acquisition and description; 2. data preparation - standardization and variance stabilizing transforma- tions; 3. computation of point forecasts using selected methods; 4. assessment of the accuracy of point forecasts; 5. generation of probabilistic forecasts using a chosen QRA variant based on point forecasts from the previous step; 6. assessment of the accuracy of probabilistic forecasts, often accompanied by comparisons between forecasts of different QRA variants. ReModels package was designed with these specific steps in mind. Each of them is implemented as a dedicated module. In the following paragraphs, we delve into the properties of these modules. 2.2. Software functionalities Dataset acquisition. The aim of the first module is to grant users access to selected datasets. These datasets typically encompass time series of histor- ical prices in the energy market, along with other market-related variables, such as forecasts of electric energy consumption. With this data, users can construct models for both point and probabilistic predictions. Within this module, a class is implemented to facilitate user access to data from the publicly available ENTSO-E API, presented in the popular form of pandas 5 dataframes. The ENTSO-E Transparency Platform was established to en- hance transparency within the European energy market, offering access to current and historical data concerning electricity prices and energy consump- tion across various countries. Data preparation. The data preparation module comprises classes that im- plement various preprocessing techniques, referred to as transformers. Each transformer possesses the capability to fit to the data, execute transforma- tions, and perform inverse transformations. The available transformers allow to scale the data w.r.t. their mean and standard deviation or median and mean absolute deviation, adjust for the daylight saving time, and stabilize the variance of the data. Variance stabilization is a particularly critical step in energy price forecasting, as electricity prices are vulnerable to rapid spikes that produce outliers in the data, which exert a significantly adverse im- pact on model parameters. Eight different variance stabilizing transformers (VSTs) have been implemented: clipping, clipping with the logarithm func- tion, logistic transform, inverse hyperbolic sine transform, BoxCox transform, polynomial transform, mirror-log transformation, and probability integral transform. VST names and formulas are listed in Table 2. All transforma- tions are fully described in [12]. The VST methods are applied as follows: point predictions for a specific day and hour (Pd,h) are scaled, which gives pd,h. Then, the selected VST is applied to these scaled predictions (pd,h), resulting in Yd,h. Subsequently, probabilistic predictions ˆYd,h are calculated based on the transformed values. Finally, an inverse transformation is applied to obtain the final predictions ˆPd,h, expressed in a real scale and units. Pd,h scaling −−−→ pd,h VST −−→ Yd,h prediction −−−−−→ ˆYd,h VST inversion −−−−−−−−→ ˆPd,h Point forecasts. The subsequent module focuses on point forecasts. Gener- ally, a point forecast can be obtained using any model or technique, and we aim to avoid imposing restrictions on the package users regarding this matter. The module provides the PointModel class that follows the API of the popular Pipeline class from scikit-learn. The user can instanti- ate a PointModel from a set of instructions, including scalers, transformers, and, ultimately, the selected model, which must implement fit and predict methods. The prepared pipeline can be executed to calculate point predic- tions from the provided data. Scalers and transformers preferred by the user are automatically incorporated into the process. 6 Transformation Formula 3σ Yd,h = { 3 · sgn(pd,h) if |pd,h| > 3, pd,h if |pd,h| ≤ 3. 3σ log Yd,h = { sgn(pd,h) (log(|pd,h| − 2) + 3) if |pd,h| > 3, pd,h if |pd,h| ≤ 3. logistic Yd,h = (1 + e−pd,h)−1 arcsinh Yd,h = arcsinh(pd,h) ≡ log (pd,h + √ p2 d,h + 1) BoxCox Yd,h = { sgn(pd,h) ((|pd,h|+1)λ−1) λ if λ > 0, log(|pd,h| + 1) if λ = 0. poly Yd,h = sgn(pd,h) [( |pd,h| c + 1)λ − ( 1 c )λ] 1 λ−1 mlog Yd,h = sgn(pd,h) [log ( |pd,h| c + 1) + log(c) ] PIT Yd,h = G−1 ( ˆFPd,h(Pd,h) ) Table 2: Variance Stabilizing Transformations implemented in the ReModels package. mlog denotes the mirror logarithm transform, λ and c are hyper-parameters specific to BoxCox, poly and mlog methods. Article [12] from which these methods were taken does not discuss the relevance of these parameters, but provides their suggested default values. G−1 is an inverse of the selected continuous distribution (e.g. normal distribution) and ˆFPd,h is an estimate (e.g. empirical cdf) of distribution of electricity prices Pd,h. Point forecast evaluation. The fourth module is dedicated to assessing point forecasts. In the field of energy price forecasting, the most commonly utilized measures include Mean Absolute Error (MAE), Root Mean Squared Error (RMSE), and Mean Absolute Percentage Error (MAPE). All the aforemen- tioned metrics are presented in Table 3 and can be calculated by the point forecast assessment module. Probabilistic forecasts. The core of the ReModels package is its probabilis- tic forecasts generation module. Within this module, all nine QRA variants are implemented as separate classes that inherit from the QRA base class. Each model class includes fit and predict methods, responsible for opti- mizing model parameters and generating predictions in a manner specific to the respective QRA variant. Some variants, such as FQRA and SQRA, may require additional parameters for model fitting, although reasonable de- faults are provided. The organization of models increases cohesion of the 7 Measure Formula MAE 1 24Nd ∑Nd d=1 ∑24 h=1 ∣ ∣ ∣Pd,h − ˆPd,h∣ ∣ ∣ RMSE √ 1 24Nd ∑Nd d=1 ∑24 h=1 (Pd,h − ˆPd,h)2 MAPE 1 24Nd ∑Nd d=1 ∑24 h=1 |Pd,h− ˆPd,h| |Pd,h| Table 3: Metrics used to assess point forecasts implemented in the ReModels package. Nd denotes the number of days. probabilistic forecasting module, reduces coupling between the QRA vari- ants implementations, simplifies future maintenance and facilitates package extensibility. Probabilistic forecast evaluation. The final module allows assessing the accu- racy of probabilistic forecasts. It incorporates two metrics: Average Empiri- cal Coverage (AEC), which measures the frequency of calculated prediction intervals containing actual values, and Aggregate Pinball Score (APS), which identifies models with the lowest value of the QR loss function. In addition, the module implements the Kupiec and Christoffersen statistical tests. For convenience, the qra.tester module is provided that unifies common steps of an energy price forecasting pipeline under an intuitive API. These steps in- clude fitting and evaluating the provided QRA model based on a configurable set of calibration and prediction windows. 3. Illustrative example This section offers an illustrative, end-to-end example of how the ReModels package can be used. It involves downloading data related to a selected elec- tricity market, processing the data with various VSTs, obtaining point and probabilistic forecasts, and finally, assessing the accuracy of the calculated forecasts. The full code required to reproduce the example is provided in Listing 1. The initial objective, downloading data, can be effortlessly accomplished using the remodels.data.EntsoeApi class. In the example, we utilize a dataset sourced from the German electricity market, containing historical electricity prices and load forecasts from January 5th, 2015 to January 1st, 2017. The user simply needs to provide the start and end dates to the get day ahead pricing and get forecast load methods of the mentioned class. The header rows of the downloaded data are displayed in Table 4. 8 datetime price da quantity 2015-01-04 23:00:00 22.34 50326.50 2015-01-05 00:00:00 17.93 48599.50 2015-01-05 01:00:00 15.17 47364.00 2015-01-05 02:00:00 16.38 47292.25 2015-01-05 03:00:00 17.38 48370.25 Table 4: Five header rows of the downloaded data from the German energy market. price da is an abbreviation for the day-ahead price [EUR/MWh], which represents the actual price for a given date and time. It is termed “day-ahead” because it is typically published the day before its delivery time. quantity is a forecast of electricity load [MWh]. To process the gathered data, one can utilize a selected transformer from remodels.transformers.VSTransformers. Each transformer class imple- ments the fit transform method, which handles the necessary processing. Figure 2 demonstrates the effect of applying selected VSTs on the consid- ered dataset. The setup of the forecasting model involves defining a sequence of data preprocessing and modeling steps within a pipeline. Steps such as standard scaling, variance stabilization, and the predictive model are encap- sulated within RePipeline class. This prepared pipeline is then passed to PointModel class. An essential feature of PointModel is its ability to dy- namically retrain on a daily basis during the prediction phase, utilizing the predict method. The model provides the flexibility to generate forecasts over calibration windows of varying lengths. A calibration window repre- sents a subset of data on which the models are retrained. In energy price forecasting, it is a common practice to train the model on a selected range, e.g. 364 days. After model calibration, a prediction is made for the next day. Subsequently, the oldest date in the calibration window is discarded, and a new date is incorporated, effectively shifting the window by one day. Once again, the model is retrained, and prediction is made for the subsequent date. PointModel class moves the calibration window of the selected length across the data. The pointModel.summary() method facilitates an in-depth examination of performance metrics across various calibration windows, akin to the example shown in Table 5. The remodels.qra module provides imple- mentation of a wide set of QRA variants. Their application to the selected dataset involves using the fit method to train the model on the data and the predict method to forecast the specified quantiles. This two-step process - fitting and predicting - enables detailed probabilistic analysis across a range of quantiles, enhancing forecasting precision and reliability. The remodels.qra.tester.QR Tester class enables comprehensive testing across designated calibration and prediction windows. In particular, QR Tester 9 Figure 2: The impact of selected transformations on electricity prices on the German market. The plots present the price over time (left) and the corresponding density (right). offers computing key evaluation metrics, such as the AEC or APS. For il- lustrative purposes, Table 6 presents AEC for several QRA variants and ex- pected coverage thresholds, providing a snapshot of the models’ performance. 1 # data downloading 2 import datetime as dt 3 from remodels . data . EntsoeApi import EntsoeApi 4 5 start_date = dt . date (2015 , 1 , 1) 6 end_date = dt . date (2017 , 1 , 1) 7 security_token = \" ... \" # free token from https :// transparency . entsoe . eu / 8 entsoe_api = EntsoeApi ( security_token ) 9 prices = entsoe_api . g e t _ d a y _ a h e a d _ p r i c i n g ( 10 start_date , 11 end_date , 12 \" 10 Y1001A1001A63L \" , # Germany domain code in ENTSO - E 13 r e s o l u t i o n _ p r e f e r e n c e =60 , # resolution in minutes 14 ) 15 forecast_load = entsoe_api . ge t_f ore cast _lo ad ( 16 start_date , 17 end_date , 18 \" 10 Y1001A1001A63L \" 19 ) 20 germany_data = prices . join ( forecast_load ) 10 Calibration Window MAE MSE RMSE MAPE R2 182 days 10.60 255.07 15.97 38.31 0.616 364 days 10.57 242.09 15.55 56.93 0.636 728 days 11.03 263.64 16.23 68.70 0.603 Table 5: Summary of performance metrics obtained from different calibration windows using the pointModel.summary() method for prices from the German market. Expected Coverage 50% 70% 90% QRA 45.17 63.51 84.86 QRM 45.87 65.05 85.77 SQRA 50.96 69.81 88.36 SQRM 52.30 70.71 88.87 Table 6: Average Empirical Coverage (AEC) is calculated using probabilistic predictions from selected four QRA variants across expected coverage levels. AEC is a measure of coverage of prediction intervals obtained with quantile regression. To obtain a prediction interval, two quantiles must be selected. For instance, the 25th and 75th quantiles create a 50% prediction interval. By considering all prediction intervals of this length, we anticipate that 50% of actual price values will fall within these intervals - this is our expected coverage. The frequency of calculated prediction intervals containing actual values is typically either lower or higher, but achieving closer proximity to the expected coverage indicates better performance. In the literature on QRA, prediction intervals with expected coverage of 50%, 70%, and 90% are commonly considered. 21 22 # VST & point predictions 23 from remodels . pipelines . RePipeline import RePipeline 24 from remodels . pointsModels import PointModel 25 from remodels . transformers import S t a n d ar d i z i n g S c a le r 26 from remodels . transformers . VSTransformers import ArcsinhScaler 27 from sklearn . linear_model import LinearRegression 28 29 pipeline = RePipeline ( 30 [ 31 ( \" standardScaler \" , S t a n d a r di z i n g S c a l er () ) , 32 ( \" vstScaler \" , ArcsinhScaler () ) , 33 ( \" linearRegression \" , LinearRegression () ) , 34 ] 35 ) 36 pointModel = PointModel ( pipeline = pipeline ) 37 pointModel . fit ( germany_data , dt . date (2016 , 12 , 1) , dt . date (2016 , 12 , 31) ) 38 po int _pre dic tio ns = pointModel . predict ( c a li br a ti o n_ wi n do w =182) 39 40 # point predictions metrics 41 pointModel . summary () 42 43 # probabilistic predictions 44 from remodels . qra import QRA 45 from remodels . qra . tester import QR_Tester 46 11 47 # actual prices - target variable in QRA model 48 price_da = poi nt_ pre dic tio ns . join ( germany_data ) [ \" price_da \" ] 49 # selected QRA variant 50 qra_model = QRA ( fit_intercept = True ) 51 52 results = QR_Tester ( 53 c al ib r at i on _w i nd o w =72 , 54 qr_model = qra_model 55 ) . fit_predict ( point_predictions , price_da ) 56 57 # probabilistic predictions metrics 58 # alpha =50 is excpected coverage of prediction intervals 59 results . aec ( alpha =50) # Average Empirical Coverage 60 results . kupiec_test ( alpha =50 , s i gn i fi ca n ce _ le ve l =0.05) 61 results . c h ri s t o f f e r s en _ t e s t ( alpha =50 , s ig n if i ca nc e _l ev e l =0.05) 62 results . aps () # Aggregate Pinball Score Listing 1: The code required to reproduce the illustrative example. 4. Impact ReModels addresses the reproducibility challenge in energy price forecasting emphasized by Lago et al. [13]. By providing a transparent approach to data acquisition, method evaluation and result analysis, the package enhances fairness and consistency of conducted experiments. We expect the package will lead to an accelerated development in energy price forecasting research by simplifying all critical steps of the modelling pipeline. The package has been applied internally in our research group to perform a fundamental comparison of implemented QRA methods across several elec- tricity markets and date ranges. The choice of markets and date ranges used for method evaluation differs from paper to paper, which makes comparison of new results with prior work difficult. In contrast, the open-source nature of ReModels facilitates gradual extension of published results to new evaluation settings (e.g. new market or date range). We’ve utilised the package to study the impact of incorporating features concerning renewable energy sources for probabilistic price forecasting. To this end, we injected new input features into the point prediction model, while the remaining aspects of the modelling pipeline remained unchanged, thus significantly reducing the time needed to validate formulated hypothe- ses. We expect that similar benefits will be experienced by the users of the package, including researchers and engineers that aim to explore and assess new modelling techniques, as well as analysts and decision-makers interested in applying an existing toolkit to new data. Although we focus on the energy price forecasting problem, the applicability of the proposed package goes beyond this domain, as QRA methods are widely adopted also in other fields, e.g. load [14, 15], wind power [16], or 12 nodal voltage forecasting [17]. Moreover, QRA serves as a benchmark for other probabilistic energy price forecasting methods, such as distributional neural networks [18, 19] or conformal prediction intervals [20]. QRA is also compared to its more distant cousins, such as Quantile Regression Random Forest [21, 22], Quantile Regression Gradient Boosting [22, 23] or Quantile Regression Neural Network [24, 25], which are also utilized in fields like price and electricity consumption forecasting. Due to its modular construction, ReModels provides a set of reusable compo- nents for tasks requiring probabilistic predictions. Coupled with the compat- ibility with the scikit-learn package, ReModels provides a general prediction toolkit applicable across various fields. In future work, we plan to enhance ReModels capabilities by implementing additional models. These models include Quantile Regression Forest [26] and Quantile Regression Neural Net- work [27]. Though these models are not linear, they are related to QRA and can be utilized for probabilistic energy price forecasting. 5. Conclusions ReModels introduces a significant leap in electricity price forecasting with its comprehensive implementation of QRA and its recent enhancements. This Python package provides a streamlined approach to probabilistic forecasting, facilitating the acquisition and preprocessing of data, as well as the evalua- tion of forecasts. By incorporating various QRA variants, ReModels enables users to explore and compare different forecasting methodologies, enriching the field of energy market analysis. The package’s design and functionality are geared towards improving forecast accuracy and aiding decision-making processes in the energy sector. References [1] J. Nowotarski, R. Weron, Recent advances in electricity price forecast- ing: A review of probabilistic forecasting, Renewable and Sustainable Energy Reviews 81 (2018) 1548–1568. doi:https://doi.org/10.1016/ j.rser.2017.05.234. [2] T. Hong, P. Pinson, S. Fan, H. Zareipour, A. Troccoli, R. J. Hyndman, Probabilistic energy forecasting: Global energy forecasting competition 2014 and beyond, International Journal of Forecasting 32 (3) (2016) 896– 913. doi:https://doi.org/10.1016/j.ijforecast.2016.02.001. 13 [3] J. Nowotarski, R. Weron, Computing electricity spot price prediction intervals using quantile regression and forecast averaging, Computa- tional Statistics 30 (2015) 791–803. doi:https://doi.org/10.1007/ s00180-014-0523-0. [4] G. Marcjasz, B. Uniejewski, R. Weron, Probabilistic electricity price forecasting with narx networks: Combine point or probabilistic fore- casts?, International Journal of Forecasting 36 (2) (2020) 466–479. doi:https://doi.org/10.1016/j.ijforecast.2019.07.002. [5] T. Serafin, B. Uniejewski, R. Weron, Averaging predictive distribu- tions across calibration windows for day-ahead electricity price forecast- ing, Energies 12 (13) (2019) 2561. doi:https://doi.org/10.3390/ en12132561. [6] K. Maciejowska, J. Nowotarski, R. Weron, Probabilistic forecasting of electricity spot prices using factor quantile regression averaging, Inter- national Journal of Forecasting 32 (3) (2016) 957–965. doi:https: //doi.org/10.1016/j.ijforecast.2014.12.004. [7] K. Maciejowska, T. Serafin, B. Uniejewski, Probabilistic forecasting with factor quantile regression: Application to electricity trading, arXiv preprint arXiv:2303.08565 (2023). doi:https://doi.org/10.48550/ arXiv.2303.08565. [8] B. Uniejewski, R. Weron, Regularized quantile regression averaging for probabilistic electricity price forecasting, Energy Economics 95 (2021) 105121. doi:https://doi.org/10.1016/j.eneco.2021.105121. [9] M. Fernandes, E. Guerre, E. Horta, Smoothing quantile regressions, Journal of Business & Economic Statistics 39 (1) (2021) 338–357. doi: https://doi.org/10.1080/07350015.2019.1660177. [10] B. Uniejewski, Smoothing quantile regression averaging: A new ap- proach to probabilistic forecasting of electricity prices, arXiv preprint arXiv:2302.00411 (2023). doi:https://doi.org/10.48550/arXiv. 2302.00411. [11] S. Wold, K. Esbensen, P. Geladi, Principal component analysis, Chemo- metrics and intelligent laboratory systems 2 (1-3) (1987) 37–52. doi: https://doi.org/10.1016/0169-7439(87)80084-9. 14 [12] B. Uniejewski, R. Weron, F. Ziel, Variance stabilizing transformations for electricity spot price forecasting, IEEE Transactions on Power Sys- tems 33 (2) (2017) 2219–2229. doi:https://doi.org/10.1109/TPWRS. 2017.2734563. [13] J. Lago, G. Marcjasz, B. De Schutter, R. Weron, Forecasting day-ahead electricity prices: A review of state-of-the-art algorithms, best practices and an open-access benchmark, Applied Energy 293 (2021) 116983. doi: https://doi.org/10.1016/j.apenergy.2021.116983. [14] B. Liu, J. Nowotarski, T. Hong, R. Weron, Probabilistic load forecasting via quantile regression averaging on sister forecasts, IEEE Transactions on Smart Grid 8 (2) (2015) 730–737. doi:https://doi.org/10.1109/ TSG.2015.2437877. [15] W. Zhang, H. Quan, D. Srinivasan, Parallel and reliable probabilistic load forecasting via quantile regression forest and quantile determina- tion, Energy 160 (2018) 810–819. doi:https://doi.org/10.1016/j. energy.2018.07.019. [16] Y. Zhang, K. Liu, L. Qin, X. An, Deterministic and probabilistic inter- val prediction for short-term wind power generation based on variational mode decomposition and machine learning methods, Energy Conver- sion and Management 112 (2016) 208–219. doi:https://doi.org/10. 1016/j.enconman.2016.01.023. [17] Y. Wang, L. Von Krannichfeldt, T. Zufferey, J.-F. Toubeau, Short-term nodal voltage forecasting for power distribution grids: An ensemble learning approach, Applied Energy 304 (2021) 117880. doi:https: //doi.org/10.1016/j.apenergy.2021.117880. [18] G. Marcjasz, M. Narajewski, R. Weron, F. Ziel, Distributional neural networks for electricity price forecasting, Energy Economics 125 (2023) 106843. doi:https://doi.org/10.1016/j.eneco.2023.106843. [19] J. Barun´ık, L. Hanus, Learning probability distributions of day-ahead electricity prices, Available at SSRN (2023). doi:https://dx.doi. org/10.2139/ssrn.4592411. [20] C. Kath, F. Ziel, Conformal prediction interval estimation and applica- tions to day-ahead and intraday power markets, International Journal of Forecasting 37 (2) (2021) 777–799. doi:https://doi.org/10.1016/ j.ijforecast.2020.09.006. 15 [21] C. Cornell, N. T. Dinh, S. A. Pourmousavi, A probabilistic forecast methodology for volatile electricity prices in the australian national elec- tricity market, International Journal of Forecasting (2024). doi:https: //doi.org/10.48550/arXiv.2311.07289. [22] Y. Wang, N. Zhang, Y. Tan, T. Hong, D. S. Kirschen, C. Kang, Com- bining probabilistic load forecasts, IEEE Transactions on Smart Grid 10 (4) (2019) 3664–3674. doi:10.1109/TSG.2018.2833869. [23] S. Ben Taieb, R. Huser, R. J. Hyndman, M. G. Genton, Forecasting uncertainty in electricity smart meter data by boosting additive quantile regression, IEEE Transactions on Smart Grid 7 (5) (2016) 2448–2455. doi:10.1109/TSG.2016.2527820. [24] D. Gan, Y. Wang, S. Yang, C. Kang, Embedding based quantile re- gression neural network for probabilistic load forecasting, Journal of Modern Power Systems and Clean Energy 6 (2) (2018) 244–254. doi: https://doi.org/10.1007/s40565-018-0380-x. [25] W. Zhang, H. Quan, D. Srinivasan, An improved quantile regression neural network for probabilistic load forecasting, IEEE Transactions on Smart Grid 10 (4) (2019) 4425–4434. doi:10.1109/TSG.2018.2859749. [26] N. Meinshausen, G. Ridgeway, Quantile regression forests., Journal of machine learning research 7 (6) (2006). [27] J. W. Taylor, A quantile regression neural network approach to estimat- ing the conditional density of multiperiod returns, Journal of forecasting 19 (4) (2000) 299–311. 16","libVersion":"0.3.2","langs":""}