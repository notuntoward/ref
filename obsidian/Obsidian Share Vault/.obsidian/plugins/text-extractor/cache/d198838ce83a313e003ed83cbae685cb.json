{"path":"lit/lit_notes_OLD_PARTIAL/Jeary24verifyRobustConformPred.pdf","text":"Verifiably Robust Conformal Prediction Linus Jeary ∗ Department of Informatics King’s College London, UK linus.jeary@kcl.ac.uk Tom Kuipers ∗ Department of Informatics King’s College London, UK tom.kuipers@kcl.ac.uk Mehran Hosseini Department of Informatics King’s College London, UK mehran.hosseini@kcl.ac.uk Nicola Paoletti Department of Informatics King’s College London, UK nicola.paoletti@kcl.ac.uk Abstract Conformal Prediction (CP) is a popular uncertainty quantification method that provides distribution-free, statistically valid prediction sets, assuming that training and test data are exchangeable. In such a case, CP’s prediction sets are guaranteed to cover the (unknown) true test output with a user-specified probability. Nevertheless, this guarantee is violated when the data is subjected to adversarial attacks, which often result in a significant loss of coverage. Recently, several approaches have been put forward to recover CP guarantees in this setting. These approaches leverage variations of randomised smoothing to produce conservative sets which account for the effect of the adversarial perturbations. They are, however, limited in that they only support ℓ2-bounded perturbations and classification tasks. This paper introduces VRCP (Verifiably Robust Conformal Prediction), a new framework that leverages recent neural network verification methods to recover coverage guarantees under adversarial attacks. Our VRCP method is the first to support perturbations bounded by arbitrary norms including ℓ 1, ℓ 2, and ℓ ∞, as well as regression tasks. We evaluate and compare our approach on image classification tasks (CIFAR10, CIFAR100, and TinyImageNet) and regression tasks for deep reinforcement learning environments. In every case, VRCP achieves above nominal coverage and yields significantly more efficient and informative prediction regions than the SotA. 1 Introduction Conformal Prediction (CP) (Vovk et al., 2005; Angelopoulos and Bates, 2021) is a popular uncertainty quantification method. In essence, it is a model-agnostic, distribution-free framework that allows one to construct prediction sets that are guaranteed to include the true (unknown) output with probability greater than 1 − α, where α ∈ (0, 1) is a user-specified miscoverage/error rate. In other words, for a test point (xn+1, yn+1), CP seeks to construct a prediction set C(xn+1) such that the following coverage (a.k.a. validity) guarantee holds: Pxn+1,yn+1[yn+1 ∈ C(xn+1)] ≥ 1 − α. (1) Importantly, the above guarantee holds when the calibration data, used to construct C(xn+1), and the test point are exchangeable (a special case is when calibration and test data are i.i.d.). ∗Authors contributed equally. Preprint. Under review.arXiv:2405.18942v2 [cs.LO] 6 Jun 2024 0 1 2 3 4 5 6 7 8 9 10 Set Size 0 500 1000 1500 2000Frequency Vanilla 0 1 2 3 4 5 6 7 8 9 10 Set SizeFrequency VRCP_I 0 1 2 3 4 5 6 7 8 9 10 Set SizeFrequency VRCP_C 0 1 2 3 4 5 6 7 8 9 10 Set SizeFrequency RSCP+ 0 1 2 3 4 5 6 7 8 9 10 Set SizeFrequency RSCP+ (PTT) Figure 1: Distribution of prediction set sizes for vanilla conformal prediction (vanilla CP) which violates Eq. (2), as well as for our proposed robust algorithms (VRCP–I and VRCP–C) along with the SotA (RSCP+ and RSCP+ (PTT), see Section 3) on the CIFAR10 dataset. As we observe, VRCP–I and VRCP–C closely resemble the spread of vanilla CP prediction set sizes, whilst the SotA falls short of achieving this. Here we use an adversarial perturbation of radius ϵ = 0.02, error rate α = 0.1, number of splits nsplits = 50 and smoothing parameter (used in RSCP+ and RSCP+ (PTT)) σ = 2ϵ. When exchangeability is violated, e.g., in the presence of test-time distribution shifts, CP’s coverage guarantee (1) ceases to hold, and we cannot rely on the prediction sets it produces. In this work, we address shifts induced by adversarial perturbations on the test inputs. In particular, we focus on perturbations in the form of additive ℓ p-bounded noise. To recover guarantees under adversarial inputs, the general mechanism is to inflate the prediction set to permit larger degrees of uncertainty. However, special care must be taken to avoid producing overly large or even trivial sets – i.e. those containing all possible outputs – as such sets do not provide any useful inference. Contributions We propose a CP framework that provides statistically valid prediction sets despite the presence of ℓ p-bounded adversarial perturbations at inference time. Formally, for any adversarially perturbed test point ˜xn+1 = xn+1 + δ, our method produces adversarially robust sets Cϵ that enjoy the following guarantee: P[yn+1 ∈ Cϵ( ˜xn+1)] ≥ 1 − α ∀δ s.t. ∥δ∥p ≤ ϵ. (2) While CP uses an underlying predictor f , often a neural network (NN), to construct prediction regions, the novelty of our approach is to leverage NN verification algorithms to compute upper and lower output bounds of f (x′) for any x ′ ∈ Bϵ(x) = {x′ : ∥x ′ − x∥p ≤ ϵ}. We use these bounds to inflate the CP regions, resulting in provably robust and efficient prediction sets. To the best of our knowledge, this is the first work that combines NN verification algorithms and CP to construct adversarially robust prediction sets. We call our method VRCP (Verifiably Robust Conformal Prediction). Recent work (discussed in Section 3) achieves adversarially robust coverage using probabilistic methods, specifically, randomised smoothing (Cohen et al., 2019). Our approach overcomes some of the theoretical and empirical drawbacks of these prior methods, which are restricted to classification tasks with ℓ 2-norm bounded guarantees and are overly conservative in practice. Thanks to our verification-based approach, VRCP is the first to extend adversarially robust conformal prediction to regression tasks and the first to go beyond ℓ 2-norm bounded guarantees. In Section 4, we introduce two versions of VRCP that apply verification at calibration and inference time, respectively. Further, in Section 5, we empirically validate our theoretical guarantees and demonstrate a direct improvement over previous work in terms of prediction set efficiency (i.e., average set size) compared to prior work. Fig. 1 shows an extract of our results on CIFAR10, demonstrating that VRCP yields more informative (tighter) prediction regions, a trend that we observe experimentally across all our benchmarks. 2 Preliminaries We denote with R+ the set of positive real numbers. Vectors x ∈ Rn are shown in bold italic and scalars x ∈ Rn in italic typeface. We denote the norm used to make Rn a normed vector space by ∥·∥. This could for instance be ℓ 1, ℓ 2, or ℓ ∞ norm. Whenever a specific norm is intended, we indicate it using an index, e.g., ∥·∥2 indicates the ℓ 2-norm. We denote the ϵ-ball around a point x ∈ Rn with respect to the used norm by Bϵ(x). 2 2.1 Conformal Prediction We provide a brief overview of the inductive (or split) vanilla CP approach. Suppose we have a dataset D containing pairs (x, y) sampled i.i.d. from an (unknown) data-generating distribution over a feature space X ⊆ Rm and label space Y such that D = {(x1, y1), . . . , (xm, ym)}. We partition the dataset into disjoint training and calibration sets Dtrain and Dcal, letting n = |Dcal|. We fit a predictor f on Dtrain and define a score function S : (X × Y ) → R as some notion of prediction error, such as S(x, y) = ∥f (x) − y∥ when f is a regressor, or S(x, y) = 1 − f (x)y when f is a classifier with f (·)y being y’s predicted likelihood. After applying the score function to all calibration points, we construct the score distribution as F = δ∞/(n+1) + ∑n i=1 δsi/n+1, where δs is the Dirac distribution with parameter s, si = S(xi, yi) and δ∞ represents the unknown score (potentially infinite) of the test point. Given a miscoverage/error rate α and a test point (xn+1, yn+1), we define the prediction set C(xn+1) by including all labels that appear sufficiently likely w.r.t. the score distribution: C(xn+1) = {y ∈ Y : S(xn+1, y) ≤ Q1−α(F )}, where Q1−α(F ) is the 1 − α quantile of F . This set satisfies the marginal coverage guarantee in Eq. (1) if the test point and the calibration points are exchangeable. 2.2 Adversarial Attacks Neural networks have been shown to be vulnerable to adversarial attacks, i.e., small changes to their input that jeopardise the prediction (Szegedy et al., 2014; Biggio and Roli, 2018). This notion can be formally defined as maximising an adversarial objective function (e.g., the loss of the true label) subject to ∥x − x′∥ ≤ ϵ. Alternatively, it can be defined as finding x′ ∈ Rm, such that ∥x − x ′∥ ≤ ϵ and ∥f (x′) − y∥ ≥ δ for a given neural network f : Rm ↦→ Rn. 2.3 Neural Network Verification Various approaches have been proposed to verify the robustness of NNs against adversarial attacks. These approaches can be divided into complete and incomplete algorithms (see related work for more details). Given a neural network f , a verifier is complete if it allows computing exact bounds f ⊥ and f ⊤ for the image f (Bϵ(x)) = {f (x′) : x′ ∈ Bϵ(x)}, i.e., such that f ⊥ = min x′∈Bϵ(x) {f (x ′)}, f ⊤ = max x′∈Bϵ(x) {f (x ′)}, (3) where min and max are computed coordinate-wise for vector-valued NNs. A verifier is incomplete, but sound, if it computes bounds that are valid but not exact, i.e., such that: f ⊥ ≤ min x′∈Bϵ(x) {f (x ′)}, f ⊤ ≥ max x′∈Bϵ(x) {f (x ′)}. (4) Our results are verifier-agnostic, meaning that they are valid for any verifier that can produce exact bounds (as in Eq. (3)) or conservative bounds (as in Eq. (4)), depending on the completeness or incompleteness of the verifier used. The fastest and simplest way to compute the bounds in Eq. (4) is to propagate the bounds on the input Bϵ(x) through the network to compute the output bounds. Several methods based on this approach have been proposed (Gowal et al., 2018; Wang et al., 2018; Zhang et al., 2018a; Batten et al., 2024; Lopez et al., 2023). At the expense of fast computation speed, these methods may result in loose bounds in Eq. (4). On the other hand, several complete methods (Pulina and Tacchella, 2010; Katz et al., 2017; Hosseini and Lomuscio, 2023) for NN verification have been put forward. Even though these methods compute exact bounds, their downside is their high computational cost. 3 Related Work Adversarially Robust Conformal Prediction Gendler et al. (2021) introduced an algorithm called Randomly Smoothed Conformal Prediction (RSCP) that integrates randomised smoothing (Duchi et al., 2012; Cohen et al., 2019; Salman et al., 2019) with CP to provide robust coverage under adversarial attacks. RSCP replaces the CP score function S(x, y) with a smoothed score ̃S(x, y) obtained by averaging the values of S(x + v, y) over nMC realisations of a Gaussian noise 3 vector v ∼ N (0, σ2I), for a given smoothing level σ. To correct for potential ℓ 2 norm-bounded ϵ perturbations at inference time, the critical value computed over the smoothed scores is inflated by ϵ/σ. This method produces empirically sound results, but the provided formal guarantees were found to be invalid in later work (Yan et al., 2023), as discussed below. Provably Robust Conformal Prediction Yan et al. (2023) address the issue with the robustness guarantee of Gendler et al. (2021) by correctly bounding the estimation error caused by the Monte- Carlo sampling used when generating the smoothed scores. The bound introduces an additional hyperparameter β such that they now find the Q1−α+2β of smooth calibrated scores and inflate by Hoeffding’s bound √− ln(β)/2nMC before correcting by ϵ/σ. Furthermore, the smoothed scores of the test points are decreased by an empirical Bernstein bound. This further inflation of the critical value and deflation of smooth scores for each test point often causes their amended algorithm, so-called RSCP+, to generate trivial prediction sets. To address this issue, the authors introduce two methods to improve the efficiency of RSCP+. Firstly, they use robustly calibrated training (RCT), a training-time regularisation technique that penalises NN parameters that contribute to high scores for the true label. Our approach assumes that the underlying classifier is given; hence, we do not evaluate RCT in our experiments. Secondly, they implement a post-training transformation (PTT), which aims to decrease the values of the smoothed calibration scores that lie between Q1−α (the critical value of the base scores) and ̃Q1−α (that of the smoothed scores). To this purpose, they transform the CDF of the smoothed scores ̃S by composing a ranking transformation and a sigmoid transformation with hyperparameters b and T . These transformations are learned using a holdout set Dhold sampled i.i.d from Dcal PTT is not theoretically guaranteed to improve the average set sizes computed by RSCP+ and, in many cases, introduces an additional dependence on the data, namely on how representative the sampled holdout set is of the calibration set. We empirically demonstrate the effect of PTT’s sample dependence in Section 5.1. Probabilistically Robust Conformal Prediction Ghosh et al. (2023) also focus on the adversarial setting but maintain a relaxed form of robust coverage, where input perturbations δ are drawn from a specific distribution and only a proportion of such perturbations are sought to be covered. In contrast, we do not make assumptions about the noise distribution, and we account for any ϵ-bounded perturbation. All the works2 discussed here rely on randomised smoothing Duchi et al. (2012) and as such are limited to ℓ 2-norm. In contrast, our VRCP approach relies on NN verifiers, can be used with any ℓ p-norms supported by the verification method, and does not require smoothing hyperparameters or holdout sets. 4 Verifiably Robust Conformal Prediction (VRCP) In this section, we formally introduce two variants of VRCP. Both methods allow us to construct adversarially robust prediction sets at inference time. The first variant, VRCP via Robust Inference (VRCP–I), employs NN verification at inference time to compute a lower bound of the score for the given test input (best-case score), thereby obtaining more conservative regions. The calibration procedure is computed as in standard CP. The second variant, VRCP via Robust Calibration (VRCP–C), instead uses NN verification at calibration time to derive upper bounds for the calibration scores (worst-case), thereby obtaining a more conservative calibration threshold (critical value). This allows us to use the regular scores at inference time, without requiring NN verification. 4.1 Verifiably Robust Conformal Prediction via Robust Inference (VRCP–I) Given a calibration set Dcal, a test input xn+1, and score function S(·, ·), we compute the prediction set for xn+1 as follows. 2At the time of submission, we are aware of a potentially related contemporaneous work titled “Robust Yet Efficient Conformal Prediction Sets\". However, neither the manuscript nor the code are available. 4 1. For each y ∈ Y we compute, s ⊥(xn+1, y) ≤ inf x′∈Bϵ(xn+1) S(x′, y). (5) 2. The robust prediction set is then defined as Cϵ(xn+1) = {y : s ⊥(xn+1, y) ≤ Q1−α(F )}. (6) Below, we show that we are able to maintain the marginal coverage guarantee from Eq. (2) for any ℓ p norm-bounded adversarial attack. Theorem 1. Let ˜xn+1 = xn+1 + δ for a clean test sample xn+1 and ∥δ∥p ≤ ϵ. The prediction set Cϵ( ˜xn+1) defined in Eq. (6) satisfies P [yn+1 ∈ Cϵ( ˜xn+1)] ≥ 1 − α. Proof. We obtain that P [yn+1 ∈ ˆC( ˜xn+1)] = P [ s ⊥( ˜xn+1, yn+1) ≤ Q1−α(F ) ] ≥ P [ inf x′∈Bϵ( ˜xn+1) S(x′, yn+1) ≤ Q1−α(F )] by Eq. (5) ≥ P [S(xn+1, yn+1) ≤ Q1−α(F )] ≥ 1 − α. 4.2 Verifiably Robust Conformal Prediction via Robust Calibration Given a calibration set Dcal, a test input xn+1, and score function S(·, ·), we compute the robustly calibrated prediction set for xn+1 as follows. 1. We compute the upper-bound calibration distribution as: F ⊤ = δ∞ (n + 1) + n∑ i=1 δs⊤ i n + 1 , where s ⊤ i ≥ sup x′∈Bϵ(xi) S(x′, yi). (7) 2. The robust post-calibration prediction set is then defined as Cϵ(xn+1) = {y : S(xn+1, y) ≤ Q1−α(F ⊤)}. (8) Theorem 2. Let ˜xn+1 = xn+1 + δ for a clean test sample xn+1 and ∥δ∥p ≤ ϵ. The prediction set Cϵ( ˜xn+1) defined in Eq. (8) satisfies P [yn+1 ∈ Cϵ( ˜xn+1)] ≥ 1 − α. Proof. We have that P [yn+1 ∈ Cϵ( ˜xn+1)] = P [ S( ˜xn+1, yn+1) ≤ Q1−α (F ⊤)] ≥ P [ S( ˜xn+1, yn+1) ≤ Q1−α ({ sup x′∈Bϵ(xi) S(x ′, yi) }n i=1 ∪ {∞} )] ≥ P [ sup x′∈Bϵ(xn+1) S(x ′, yn+1) ≤ Q1−α ({ sup x′∈Bϵ(xi) S(x′, yi) }n i=1 ∪ {∞} )] ≥ 1 − α Let P ⊤ denote the distribution of (x⊤, y) where x⊤ = argsupx′∈Bϵ(x)S(x′, y) and (x, y) ∼ P . The final inequality above holds since it is equivalent to constructing a CP prediction set using n i.i.d realisations of P ⊤ and evaluating it on xn+1 ∼ P ⊤. The resulting set will include the true test output yn+1 with probability at least 1 − α. 5 4.3 Computation of score bounds Classification In the classification setting, we use the score function proposed in (Lei et al., 2013; Gendler et al., 2021): S(x, y) = 1 − f (x)y, (9) where f (x)y ∈ (0, 1) is the model-predicted likelihood for label y. In this setting, to compute s ⊥ and s ⊤ (required by VRCP–I and VRCP–C, respectively), it suffices to use NN verification algorithms to derive the output bounds for f (x). Specifically, in VRCP–I, for a test input xn+1 and for each y ∈ Y we derive s ⊥(xn+1, y) as s ⊥(xn+1, y) = 1 − f (xn+1) ⊤ y , (10) where f (xn+1)⊤ y denotes the upper bound computed by the neural network verifier for the model- predicted likelihood of label y ∈ Y and input xn+1. In VRCP–C, for each calibration point (xi, yi) we compute s ⊤(xi, yi) as s ⊤(xi, yi) = 1 − f (xi)⊥ yi, (11) where f (xi)⊥ yi denotes the lower bound of the model output for label yi given input xi. Regression In the regression tasks, we follow the conformalized quantile regression (CQR) method- ology proposed by (Romano et al., 2019). We train quantile regressors fαlow and fαhigh to estimate the αlow = α/2 and αhigh = 1 − α/2 quantiles of y | x. In CQR, we use the following score function: S(x, y) = max {fαlow(x) − y, y − fαhigh(x)}. (12) Unlike classification, where the label space is discrete, we cannot construct the region explicitly by enumerating all possible outputs y. Instead, the prediction region for a given test point C(xn+1) is constructed implicitly, by adjusting the quantile predictions by the critical value of the calibration distribution Q1−α(F ), as follows: C(xn+1) = [ fαlow (xn+1) − Q1−α(F ), fαhigh(xn+1) + Q1−α(F ) ] (13) In both VRCP–C and VRCP–I, the score function leverages an NN verifier to derive the bounds over the upper and lower quantiles of the model. In VRCP–C, we compute the worst-case calibration scores as: s ⊤(xi, yi) = max {f ⊤ αlow (xi) − yi, yi − f ⊥ αhigh(xi)}. (14) In VRCP–I for classification, for each output we check inclusion in Cϵ by using the best-case score s ⊥. As explained above, explicit enumeration is infeasible for regression, and so we construct our robust region by replacing predicted quantiles in Eq. (13) with their conservative approximations, as follows: Cϵ(xn+1) = [f ⊥ αlow (xn+1) − Q1−α(F ), f ⊤ αhigh(xn+1) + Q1−α(F ) ] (15) The above-defined region is equivalent to enumerating all possible outputs y, and for each, considering the best-case score s ⊥(xn+1, y) = max {f ⊥ αlow (xn+1) − y, y − f ⊤ αhigh(xn+1)}. A proof is available in Appendix A. A nice property of both VRCP–I and VRCP–C is that they guarantee that they can only increase the size of the prediction set for any input x compared to vanilla CP, thus will always attain at least as much coverage as the vanilla CP procedure. Moreover, as we show in Section 5, both algorithms do not trivially inflate the size of the prediction sets and maintain a similar distribution of set sizes. This is formalised in the Proposition 1, which is proved in Appendix A. Proposition 1. Let C(x) and Cϵ(x) be the prediction sets obtained using vanilla CP and VRCP (using VRCP–I or VRCP–C), respectively. For any input x, we have that C(x) ⊆ Cϵ(x). 5 Evaluation We evaluate VRCP–I and VRCP–C on classifiation (image) and regression (RL) benchmarks, and compare them against the SotA approaches on each benchmark. 6 5.1 Classification Experiments We evaluate each method using a nominal coverage of 1 − α = 0.9 and report the 95% confidence intervals for coverage and average set sizes computed over 50 splits (nsplits = 50) of the calibration, holdout and test set. Bounds We use the verification library auto_LiRPA (Xu et al., 2020a) to compute the output bounds for f (x) required in Eq. (10) and Eq. (11) for VRCP–I and VRCP–C respectively. In particular, we use two SotA GPU-parallelised incomplete NN verification algorithms, CROWN Zhang et al. (2018b) and α-CROWN Xu et al. (2020b). In brief, CROWN performs linear bound propagation and α-CROWN employs a branch-and-bound algorithm to tighten the CROWN bounds at the expense of slower verification times. Therefore, we use CROWN to compute the output bounds for the TinyImageNet model and α-CROWN for the smaller CIFAR10 and CIFAR100 models. Our CIFAR10 model with α-CROWN takes ≈ 0.5s per image to compute bounds with ϵ = 0.03, whereas our larger CIFAR100 model takes ≈ 7.2s with ϵ = 0.02. Comparatively, computing the smoothed scores takes ≈ 0.09s per image to compute on both models under the same respective ϵ values. The largest model for the TinyImageNet dataset uses CROWN to compute bounds at a rate of ≈ 0.2s per image whereas the smoothed scores take ≈ 0.24s. All measurements are made with respect to the hardware details listed in Appendix B. Attacks We use the PGD attack algorithm (Madry et al., 2017), which is a popular white-box attack algorithm to generate adversarial inputs with respect to either the ℓ 2 or ℓ∞ norm. Models For all datasets, we train a CNN model on training set images with random crop and horizontal flip augmentations. We do not perform adversarial training as we assume that the severity ϵ of the attack is unknown at training time. Full model details are outlined in the appendix. Hyperparameters RSCP+ based approaches use σ = 2ϵ, β = 0.001 and those with PTT use |Dhold| = 500, b = 0.9 and T = 1/400. For PGD, we choose a step size of 1/255 and compute 100 steps for each attack. For CIFAR10 and CIFAR100 |Dtrain| = 50,000 and for TinyImageNet |Dtrain| = 100,000. For all datasets |Dcal| = 4,500 and |Dtest| = 5,000. For methods that don’t rely on PTT, we use Dcal ∪ Dhold as the calibration dataset. Results In Table 1, we benchmark both our methods against the baseline vanilla CP (which is agnostic of the attack), RSCP+ and RSCP+ with PTT. At inference time, images are attacked using PGD to generate ℓ 2 norm-bounded attacks with ϵ = 0.02 for CIFAR100 and TinyImageNet, and ϵ = 0.03 for CIFAR10. In all domains, the vanilla CP method fails to construct valid prediction sets with nominal marginal coverage, as expected. RSCP+ maintains robust marginal coverage but produces trivial prediction sets in all settings due to the highly conservative inflation of the threshold with respect to the calibration scores. Using PTT improves RSCP+’s performance but introduces significant variance in the set sizes: in many cases, PTT still produces trivial prediction sets and is heavily dependent on the sampled holdout set for RSCP+ to generate useful predictions. Both of our methods have minimal sample dependence, as demonstrated by a very small variability in coverage and size over the 50 splits. We obtain prediction sets with substantially smaller average sizes than the other robust approaches, and hence, they provide more informative uncertainty esti- mates. VRCP–I provides slightly more efficient regions than VRCP–C. Still, it implies additional computational overhead at inference time because it requires computing bounds via NN verification for each test sample. In contrast, in VRCP–C, bounds are computed only once at calibration time. On the other hand, in an environment where we may want to change ϵ for different test points at inference time, VRCP–I would be a sound choice, while VRCP–C would require re-calibration. Effect of increasing adversarial noise Fig. 2a shows the impact of increasing ϵ across all evaluated robust methods. Our methods consistently produce smaller average set sizes with minor sample dependence, and simultaneously provide a more conservative marginal coverage than RSCP+ (PTT). We remark that, unlike RSCP+, we do not require a holdout set or any score function transformations. 7 Table 1: Marginal Coverage and Average Set Sizes for different methods on CIFAR10, CIFAR100 and TinyImageNet. All results record a 95% confidence interval with nsplits = 50, α = 0.1, σ = 2ϵ, nMC = 1024, ϵ = 0.03 for CIFAR10 and ϵ = 0.02 otherwise. CIFAR10 CIFAR100 TinyImageNet Method Coverage Size Coverage Size Coverage Size Vanilla 0.878±0.002 1.721±0.008 0.890±0.002 6.702±0.058 0.886±0.002 38.200±0.252 RSCP+ 1.000±0.000 10.000±0.000 1.000±0.000 100.000±0.000 1.000±0.000 200.000±0.000 RSCP+ (PTT) 0.983±0.008 8.357±0.780 0.925±0.010 26.375±9.675 0.931±0.013 90.644±20.063 VRCP–I 0.986±0.000 4.451±0.011 0.971±0.001 22.530±0.107 0.958±0.001 72.486±0.311 VRCP–C 0.995±0.000 5.021±0.010 0.983±0.000 23.676±0.131 0.965±0.001 77.761±0.352 0.01 0.02 0.03 0.04 0.05 ϵ 0.90 0.95 1.00MarginalCoverage 0.01 0.02 0.03 0.04 0.05 ϵ 2.5 5.0 7.5 10.0AverageSetSize (a) Varying the value of ϵ for nsplits = 50, σ = 2ϵ, α = 0.1, and nMC = 1024. 256 512 1024 2048 4096 nM C 0.94 0.96 0.98 1.00MarginalCoverage VRCP-I VRCP-C RSCP+ RSCP+ (PTT) 256 512 1024 2048 4096 nM C 6 8 10AverageSetSize (b) Varying nMC for nsplits = 50, ϵ = 0.03, α = 0.1, and σ = 2ϵ. Figure 2: Marginal Coverage and Average Set Sizes on CIFAR100 with 95% confidence intervals. Effect of increasing Monte-Carlo samples Fig. 2b displays the influence of the nMC hyperparam- eter on the RSCP+ based methods with respect to our CIFAR10 model. Whilst increasing samples improves the performances of randomised smoothing approaches, we incur a large computational overhead when computing the smoothed scores. In our experiments in Table 1 we fix nMC = 1024 which is four times larger than the value for nMC used in previous work Gendler et al. (2021)Yan et al. (2023) as a trade-off between prediction quality and computation. Table 2: Marginal Coverage and Average Set Sizes for ϵ perturbations with respect to the ℓ ∞ norm on the CIFAR10 dataset. All results record a 95% confidence interval with nsplits = 50, α = 0.1 and ϵ = 0.001. CIFAR10 Method Coverage Size Vanilla 0.872±0.002 1.737±0.007 VRCP–I 0.947±0.001 2.262±0.008 VRCP–C 0.931±0.001 2.342±0.008 Beyond ℓ 2 norm bounded attacks Table 2 demon- strates that both of our methods generalise to other ℓp bounded perturbations other than for when p = 2 which RSCP+ is limited to. In particular, we examine the ℓ ∞, where even a small ϵ can cause misclassification. We experiment using CIFAR10 and use ϵ = 0.001. PGD is used to generate ℓ ∞ bounded adversarial examples. Set size distribution From Fig. 1 we can visually examine the sample dependency issue that the PTT in- troduces. In the splits where the holdout set allows the PTT to make an informative transformation, RSCP+ is able to make quite reasonable predictions, otherwise, RSCP+ just returns trivial sets. This is clearly an un- desirable property and adds significant variance to the predictions. Both of our methods increase the spread of the average set sizes to account for the presence of adversarial examples whilst still maintaining a consistent distribution. 5.2 Regression Experiments We evaluate our VRCP framework on regression tasks from the PettingZoo Multi-Particle Environ- ment (MPE) library Terry et al. (2021) for deep reinforcement learning. In these environments, the world is a 2D space containing n agents (of which some may be adversarial) and m landmarks, which are defined as circles of fixed radii. The position of the landmarks is fixed, and agents traverse the space according to second-order motion laws. We evaluate our method on three tasks: 8 Table 3: Marginal coverage and average interval lengths for each MPE regression task for various ϵ perturbations bounded by an ℓ ∞ norm. All results record a 95% confidence interval with nsplits = 50. Perturbation ϵ = 0.01 ϵ = 0.02 ϵ = 0.04 Method Coverage Length Coverage Length Coverage LengthAdversaryVanilla 0.871±0.006 0.480±0.006 0.834±0.007 0.484±0.006 0.745±0.009 0.490±0.006 VRCP–I 0.928±0.004 0.605±0.006 0.951±0.003 0.673±0.006 0.985±0.002 0.855±0.006 VRCP–C 0.910±0.005 0.534±0.006 0.923±0.005 0.606±0.006 0.966±0.003 0.806±0.005SpreadVanilla 0.864±0.005 0.595±0.005 0.834±0.005 0.602±0.005 0.768±0.006 0.612±0.005 VRCP–I 0.929±0.004 0.690±0.006 0.958±0.003 0.769±0.006 0.991±0.001 0.992±0.006 VRCP–C 0.908±0.005 0.663±0.006 0.935±0.004 0.762±0.005 0.977±0.002 1.054±0.006PushVanilla 0.891±0.006 0.643±0.006 0.875±0.007 0.646±0.006 0.841±0.008 0.652±0.006 VRCP–I 0.917±0.006 0.687±0.006 0.934±0.005 0.721±0.006 0.961±0.003 0.800±0.006 VRCP–C 0.905±0.005 0.674±0.006 0.910±0.005 0.711±0.005 0.924±0.005 0.795±0.005 • Adversary The good agents must try to reach a specific goal landmark whilst avoiding the adversaries. We use 2 good agents, 1 adversary and 2 landmarks. • Spread All agents collaborate and minimise the distance to each landmark. We set the number of agents and landmarks equal to 3. • Push In this task, there is a single good agent, adversary and landmark. The task is for the adversary to maximise the distance between the landmark and the good agent. In our experiments, for data-generation we select 5,000 random initial world configurations and, for each, simulate 25 Monte-Carlo trajectories of length k = 5. The regression task for all environments is to predict the upper and lower quantiles of the total cumulative reward over the k steps, given as input the initial world state. As in the classification experiments, we partition the dataset into the following partitions:|Dtrain| = 1,000, |Dcal| = 2,000 and |Dtest| = 2,000. For computing the bounds, we use CROWN Zhang et al. (2018b) with ℓ ∞-bounded perturbations. To generate the adversarially perturbed test points, we use the Fast Gradient Sign Method as given in (Goodfellow et al., 2015). As seen in Table 3, both VRCP methods recover the marginal coverage guarantees in the presence of adversarial perturbations, whereas vanilla CP fails drastically after ϵ = 0.02. We note that the performance of VRCP–C and VRCP–I are similar, although VRCP–I tends to produce more conservative intervals (without sacrificing efficiency). 6 Limitations VRCP’s scalability depends on that of the underlying neural network verifier. We evaluated VRCP on small to medium-sized neural networks. For large networks, existing complete verification methods would become computationally infeasible, while incomplete methods would produce bounds that are too loose to be useful. However, it is important to note that since VRCP is agnostic of the specific verification tool used, it would directly benefit from any future advances in neural network verification. Thus, as neural network verification tools continue to evolve and improve, so does VRCP. 7 Conclusion We introduced Verifiably Robust Conformal Prediction (VRCP), a novel framework that leverages conformal prediction and neural network verification to produce prediction sets that maintain marginal coverage under adversarial perturbations. We presented two variants: VRCP–C, which applies verification at calibration time, and VRCP–I, which applies verification at inference time. Extensive experiments on classification and regression tasks demonstrated that VRCP recovers valid marginal coverage in the presence of ℓ1, ℓ2, and ℓ∞-norm bounded adversarial attacks while producing more accurate prediction sets than existing methods. VRCP is the first adversarially robust CP framework supporting regression tasks and perturbations beyond the ℓ2 norm, achieving 9 strong results without relying on probabilistic smoothing or posthoc corrections. VRCP’s theoretical guarantees and empirical performance showcase the potential of leveraging verification tools for uncertainty quantification of machine learning models under attack. Acknowledgments and Disclosure of Funding This work is supported by the “REXASI-PRO” H-EU project, call HORIZON-CL4-2021-HUMAN- 01-01, Grant agreement ID: 101070028. References V. Vovk, A. Gammerman, and G. Shafer, Algorithmic learning in a random world. Springer, 2005, vol. 29. A. N. Angelopoulos and S. Bates, “A gentle introduction to conformal prediction and distribution-free uncertainty quantification,” arXiv preprint arXiv:2107.07511, 2021. J. Cohen, E. Rosenfeld, and Z. Kolter, “Certified adversarial robustness via randomized smoothing,” in international conference on machine learning. PMLR, 2019, pp. 1310–1320. C. Szegedy, W. Zaremba, I. Sutskever, J. Bruna, D. Erhan, I. J. Goodfellow, and R. Fergus, “Intriguing properties of neural networks,” in 2nd International Conference on Learning Representations, ICLR, 2014. B. Biggio and F. Roli, “Wild patterns: Ten years after the rise of adversarial machine learning,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, 2018, pp. 2154–2156. S. Gowal, K. Dvijotham, R. Stanforth et al., “On the effectiveness of interval bound propagation for training verifiably robust models,” 2018, arXiv preprint arXiv:1810.12715. S. Wang, K. Pei, J. Whitehouse, J. Yang, and S. Jana, “Formal security analysis of neural networks using symbolic intervals,” in USENIX Security Symposium. USENIX Association, 2018, pp. 1599–1614. H. Zhang, T.-W. Weng, P.-Y. Chen, C.-J. Hsieh, and L. Daniel, “Efficient neural network robustness certification with general activation functions,” in Advances in Neural Information Processing Systems, NuerIPS, 2018. B. Batten, M. Hosseini, and A. Lomuscio, “Tight verification of probabilistic robustness in bayesian neural networks,” in The 27th International Conference on Artificial Intelligence and Statistics, AISTATS, vol. 238, 2024. D. M. Lopez, S. W. Choi, H. Tran, and T. T. Johnson, “NNV 2.0: The neural network verification tool,” in Computer Aided Verification - 35th International Conference, CAV, ser. Lecture Notes in Computer Science, C. Enea and A. Lal, Eds., vol. 13965. Springer, 2023, pp. 397–412. L. Pulina and A. Tacchella, “An abstraction-refinement approach to verification of artificial neural networks,” in Computer Aided Verification, 22nd International Conference, CAV, ser. Lecture Notes in Computer Science, vol. 6174. Springer, 2010, pp. 243–257. G. Katz, C. W. Barrett, D. L. Dill, K. Julian, and M. J. Kochenderfer, “Reluplex: An efficient SMT solver for verifying deep neural networks,” in Computer Aided Verification - 29th International Conference, CAV, ser. Lecture Notes in Computer Science, vol. 10426. Springer, 2017, pp. 97–117. M. Hosseini and A. Lomuscio, “Bounded and unbounded verification of rnn-based agents in non- deterministic environments,” in International Conference on Autonomous Agents and Multiagent Systems, AAMAS. IFAAMAS, 2023, pp. 2382–2384. A. Gendler, T.-W. Weng, L. Daniel, and Y. Romano, “Adversarially robust conformal prediction,” in International Conference on Learning Representations, 2021. 10 J. C. Duchi, P. L. Bartlett, and M. J. Wainwright, “Randomized smoothing for stochastic optimization,” SIAM Journal on Optimization, vol. 22, no. 2, pp. 674–701, 2012. H. Salman, J. Li, I. Razenshteyn, P. Zhang, H. Zhang, S. Bubeck, and G. Yang, “Provably robust deep learning via adversarially trained smoothed classifiers,” Advances in neural information processing systems, vol. 32, 2019. G. Yan, Y. Romano, and T.-W. Weng, “Provably robust conformal prediction with improved efficiency,” in The Twelfth International Conference on Learning Representations, 2023. S. Ghosh, Y. Shi, T. Belkhouja, Y. Yan, J. Doppa, and B. Jones, “Probabilistically robust conformal prediction,” in Uncertainty in Artificial Intelligence. PMLR, 2023, pp. 681–690. J. Lei, J. Robins, and L. Wasserman, “Distribution-free prediction sets,” Journal of the American Statistical Association, vol. 108, no. 501, pp. 278–287, 2013. Y. Romano, E. Patterson, and E. Candes, “Conformalized quantile regression,” Advances in neural information processing systems, vol. 32, 2019. K. Xu, Z. Shi, H. Zhang, Y. Wang, K.-W. Chang, M. Huang, B. Kailkhura, X. Lin, and C.-J. Hsieh, “Automatic perturbation analysis for scalable certified robustness and beyond,” Advances in Neural Information Processing Systems, vol. 33, 2020. H. Zhang, T.-W. Weng, P.-Y. Chen, C.-J. Hsieh, and L. Daniel, “Efficient neural network robustness certification with general activation functions,” Advances in neural information processing systems, vol. 31, 2018. K. Xu, H. Zhang, S. Wang, Y. Wang, S. Jana, X. Lin, and C.-J. Hsieh, “Fast and complete: Enabling complete neural network verification with rapid and massively parallel incomplete verifiers,” arXiv preprint arXiv:2011.13824, 2020. A. Madry, A. Makelov, L. Schmidt, D. Tsipras, and A. Vladu, “Towards deep learning models resistant to adversarial attacks,” arXiv preprint arXiv:1706.06083, 2017. J. Terry, B. Black, N. Grammel, M. Jayakumar, A. Hari, R. Sullivan, L. S. Santos, C. Dieffendahl, C. Horsch, R. Perez-Vicente et al., “Pettingzoo: Gym for multi-agent reinforcement learning,” Advances in Neural Information Processing Systems, vol. 34, pp. 15 032–15 043, 2021. I. J. Goodfellow, J. Shlens, and C. Szegedy, “Explaining and harnessing adversarial examples,” 2015. 11 A Additional Proof Details Here we prove Proposition 1 regarding the prediction sets obtained from VRCP–I and VRCP–C. Proof of Proposition 1. To prove C(x) ⊆ Cϵ(x) for VRCP–I it suffices to observe that Cϵ(x) = {y ∈ Y : s ⊥(x, y) ≤ Q1−α(F )} ⊇ ⋃ x′∈Bϵ(xn+1){y ∈ Y : S(x′, y) ≤ Q1−α(F )} = ⋃ x′∈Bϵ(xn+1) C(x ′) ⊇ C(x). To prove the same for VRCP–C, we observe that since Q1−α(F ⊤) ≥ Q1−α(F ), we have that Cϵ(x) = {y ∈ Y : S(x, y) ≤ Q1−α(F ⊤)} ⊇ {y ∈ Y : S(x, y) ≤ Q1−α(F )} = C(x). Next, we prove the validity of the VRCP–I region for the regression case, defined in Eq. (15). Proof. It suffices to show that all y ∈ Cϵ(xn+1) = [f ⊥ − q, f ⊤ + q] satisfy s ⊥(xn+1, y) = max {f ⊥ − y, y − f ⊤} ≤ q and all y ̸∈ Cϵ(xn+1) do not. For simplicity of notation, we abbreviated f ⊤ αhigh(xn+1) with f ⊤, f ⊥ αlow (xn+1) with f ⊥ and Q1−α(F ) with q. Assume y ∈ Cϵ(xn+1). We divide the proof into two cases: 1. s ⊥(xn+1, y) = f ⊥ − y, which implies that y ∈ [f ⊥ − q, f ⊤+f ⊥ 2 ]. It suffices to show that f ⊥ − y ≤ q for y = f ⊥ − q, which is clearly satisfied. 2. s ⊥(xn+1, y) = y − f ⊤, which implies that y ∈ [ f ⊤+f ⊥ 2 , f ⊤ + q]. It suffices to show that y − f ⊤ ≤ q for y = f ⊤ + q, which is clearly satisfied. Finally, we show that y ̸∈ Cϵ(xn+1) implies s ⊥(xn+1, y) > q: if y < f ⊥ − q, we have that s ⊥(xn+1, y) = f ⊥ − y > q. Similarly, if y > f ⊥ + q, we have that s ⊥(xn+1, y) = y − f ⊤ > q. B Model Details All experimental results were obtained from running the code provided in the supplementary material on a server with 2x Intel Xeon Platinum 8360Y (36 cores, 72 threads, 2.4GHz), 512GB of RAM and an NVIDIA A40 48GB GPU. All pre-trained models as well as the training scripts are also provided in the supplementary material. B.1 Classification CIFAR10 We use 2 convolution layers with average pooling and dropout, followed by 2 linear layers. ReLU activations across all layers. CIFAR100 We use 1 convolution layer with average pooling, 2 further convolution layers with average pooling and dropout followed by 2 linear layers. ReLU activations across all layers. TinyImageNet We use 4 convolution layers with dropout followed by 2 linear layers with dropout. Leaky ReLU activation function with a = 0.1 For all models we train using images augmented with random crop with 4 pixels of padding and random horizontal flip. We standardise the TinyImageNet models with µ = 0.5 and σ = 0.5 overall 3 RGB channels. As previously mentioned, we do not make any assumptions during training about the perturbations we expect to see at inference time. As such, unlike the existing SotA methods, we do not train on smoothed or adversarially attacked images. 12 All models are trained for 200 epochs with a batch size of 128 using the stochastic gradient descent optimiser with momentum set to 0.9. We also employ a weight decay of 5 × 10−4 and a cosine annealing learning rate scheduler. B.2 Regression For the MPE datasets, we train Deep Q-Net policies for the RL tasks for the sole purposes of generating the appropriate datasets and provide these policies in the supplementary material. The model used for the quantile regressors is a simple linear architecture consisting of 3 layers, separated with ReLU activation functions and dropout. We trained the model to estimate the α/2 and 1 − α/2 quantiles, where α = 0.1, as in the other experiments. The exact parameters for the RL policies can be found in the config files within the supplementary material however have little bearing on the efficiency of our results, being used only for the data- generating process. The quantile regressors are each trained for 400 epochs, with a learning rate of 10−5, dropout of 0.1 and a decay of 10−5. 13","libVersion":"0.3.2","langs":""}