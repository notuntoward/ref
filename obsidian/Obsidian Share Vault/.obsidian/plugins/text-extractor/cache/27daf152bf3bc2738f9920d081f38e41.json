{"path":"lit/lit_notes_OLD_PARTIAL/Swimm24devKnowldgShare.pdf","text":"The state  of developer knowledge sharing 2024 Impact, challenges,   and emerging AI trends Table of Contents 01 Introduction & key findings 2 02 Developer productivity: Expectation vs reality 5 03 Developer questions are a major time usage 6 04 Improve developer productivity by >50% 8 05 Developers struggle with documentation 9 06 Devs doubt the efficacy of your knowledge sharing practices 11 07 Investing in knowledge sharing pays dividends 12 08 The organizational toll of ineffective knowledge sharing 13 09 Everyone’s doing it (AI, that is ) 14 10 What devs look for in a knowledge sharing tool 16 11 Demographics 17 12 Conclusion 18 13 Methodology 18 Introduction: With almost all developers (92%) using or experimenting with AI coding tools,   AI continues to transform nearly every aspect of the software development lifecycle. Despite rapid technological advancements, the fundamental requirement to understand code remains unchanged, for developers and managers alike. Whether code is manually written by a developer or generated by AI, eventually, someone else will need to understand and interpret that code.  Introduction & key findings Chapter 1 Investments to improve the ways developers understand code are usually about sustaining or improving developer velocity. The argument here is that with accessible technical knowledge, developers can quickly find the information they need to complete tasks or make better decisions.    This is a great starting point, but there’s more to it: Code knowledge sharing verb The process of distributing engineering expertise and understanding of codebases within a group. This activity encompasses various methods such as documentation, engaging in pair programming, conducting code reviews, and more.  2 Onboarding new developers to the team  Working with an unfamiliar area of the codebase Enforcing standards during development  Reducing the burden of code reviews Responding to incidents faster Improving the developer experience  As codebases become increasingly complex due to factors like advanced infrastructure, the use of multiple programming languages, distributed architectures, and a significant rise in AI tool usage, the need to understand code becomes even more mission critical for teams.  This survey highlights the challenges and benefits of code knowledge sharing, revealing differing perspectives between managers and developers on this issue. It emphasizes the urgent need to provide developers with the best tools and solutions for navigating and understanding complex codebases. Key findings: 01. Understanding code accelerates development velocity by 50% 73% of developers surveyed recognize the importance of code understanding in boosting their productivity. They believe that sharing precise, comprehensive, and deep insights about code can, on average, enhance their project delivery speed by 50%. These findings highlight just how crucial the exchange of technical knowledge is for accelerating development cycles, simplifying processes, and enhancing developer experience. As engineering organizations adjust their strategies to keep up with AI advancements, prioritizing strong code knowledge transfer practices is crucial for maintaining high levels of velocity and fostering innovation. 3 02. Only 1% of developers believe their company excels in sharing code knowledge Less than half of the participants (46%) feel confident in their company's ability to share code knowledge effectively, with only 1% considering their organization very successful in this area. This lack of confidence is alarming, given the significant benefits that effective code knowledge sharing has on speeding up project delivery. Moreover, as AI-generated code becomes more common, the need for efficient knowledge transfer among engineers is increasingly critical. 03. It’s time to implement your AI strategy (if you haven’t already started) An overwhelming 99% of organizations surveyed are either currently using or intend to implement AI tools for sharing code knowledge. Of these, 30% are already employing AI tools, and another 47% plan to do so within the coming year. Developers everywhere are making AI a part of their development flow and it’s clear that engineering organizations that are not adopting these tools risk falling behind. 04. Developers want AI tools that integrate with their existing workflows & prioritize automation Respondents emphasized several crucial features for code knowledge sharing tools, notably the ability to automatically keep sources of technical knowledge up to date (internal documentation, for example) (45%), offer dashboards with usage metrics (42%), and facilitate the creation and discovery of technical codebase specific knowledge within the IDE (41%). 05. Effective knowledge management requires implementing tailored solutions Developers responded almost e q ually to the challenges they face in sharing technical knowledge, recognizing the impact that effective knowledge sharing has on productivity. Developers struggle to efficiently capture technical knowledge and managers fear losing valuable insights when key team members move on. These findings highlight the need for the implementation of comprehensive solutions that simplify capturing and preserving technical knowledge and expertise. 4 23% Neutral 8% Very important 65% Somewhat important 4% Somewhat unimportant 73% Important A clear majority of respondents (73%) confirm the critical role   code knowledge sharing has in boosting developer productivity. Developer productivity: Expectation vs. reality Chapter 2 Developers’ perspective 81% of team members acknowledge the importance of sharing code knowledge for developer productivity. Management perspective A smaller proportion (65%) of   senior staff, including managers and directors, recognize its importance. 57% 8% 30% 5% 74% 7% 16% 3% 5 Bridging the knowledge gap The gap in views on sharing code knowledge between developers and senior management emphasizes the importance of managers engaging with their teams when evaluating methods for knowledge transfer. The fact that 30% of management is neutral about the impact of knowledge sharing on productivity suggests they might not be using metrics that clearly link knowledge sharing to deployment frequency. Alternatively, it could be that as management becomes more distanced from the day-to-day realities of coding, they may not immediately see the direct correlation between sharing code knowledge and improvements in project delivery speeds and overall productivity. By narrowing this divide, organizations not only enhance efficiency but also safeguard the business side of things against system outages and vendor disruptions. Developer questions are a major time usage Chapter 3 & only increase as companies scale Almost all respondents, 94% of developers and 97% of managers, spend significant time (4.9 hours/week, on average) searching for answers to questions about code. However, the data presents an interesting trend: the weekly time spent looking for information to understand code or answering code questions grows as companies scale and their codebase becomes increasingly complex. Developers from companies with 100+ engineers allocate 5-10 hours per week to these tasks. That’s 10% of their workweek. 6 Additionally, developers’ self-reported time usage skews higher (5 hours), while management (4.7 hours) tends to underestimate the amount of time their team spends searching for answers to code-related questions. Management Developers Not at all,   but I need to 1% 2% Less than 1 hour 2% 4% 1-3 hours 22% 16% 3-5 hours 45% 41% 5-10 hours 29% 33% More than 10 hours 1% 4% 5 Hours Developers avg. 4.7 Hours Management avg. Weekly time spent on code understanding and answering questions: <= 100 Developers 100+ Developers 19% 39% 5-10 hours spent by number of developers in the company: The distance to knowledge The relationship between a company's size and time dedicated to managing knowledge highlights the scaling challenges engineering organizations face. As companies grow, accessing relevant knowledge becomes harder, further complicated by increasingly complex codebases. However, when information about a company's codebase is made widely available and accessible, it greatly reduces the gap to necessary knowledge, allowing developers to focus more on building and fully utilizing their creativity. 7 Developer productivity can be improved by >50% Chapter 4 When knowledge about code is shared effectively, the impact is clear: developers report a more than 50% increase in delivery velocity. Once again there’s disparity in the perspectives between developers and managers: The difference in views between individual contributors and managers indicates a varying awareness of how knowledge sharing affects delivery speed. Managers, with their broader perspective, might better understand the impact of effective knowledge sharing and documentation on the team as a whole. 21% 23% 19% 55% 47% 64% 22% 26% 17% 1.75x or more1.5x1.25xIt would stay the same 2% 4% 0% Management Team member All responses 1.5 times more On average Impact on delivery velocity by seniority: Developers’ perspective 73% of individual contributors   believe that effective knowledge sharing increases delivery velocity   by at least 50%. Management perspective That number increases to 81% when surveying management. 8 Developers struggle with documentation Chapter 5 Developers identified three main challenges they encounter daily regarding the sharing of code knowledge: 01. Code documentation is hard to create (45%) 02. Resistance to documentation within the team (45%) 03. Code documentation is out of date (44%) Managers worry about knowledge loss 40% 45% 35% 38% 45% 31% 36% 44% 28% 35% 27% 43% 34% 35% 33% 34% 34% 33% 32% 19% 45% 29% 31% 27% Code documentation is hard to create Resistance to document within the team Code documentation is out of date We are losing critical knowledge when employees leave Code knowledge is hard to find Documentation is unclear or incomplete The people with the knowledge spend too much time answering questions Our culture doesn ’ t incentiviz e knowledge sharing All responses Team member Management 9 Once again, there’s contrasting viewpoints between developers and managers:  Management should focus on the system that facilitates knowledge sharing. This includes addressing 'bus factor' and the amount of time senior engineers devote to answering questions. Addressing these issues, knowledge loss and reduced engineering capacity, is more critical than the commonly cited challenge of documentation. Top 3 management challenges: 01. Losing critical knowledge when employees leave (45%) 02. The people with the knowledge spend too much time answering questions (43%) 03. Code documentation is hard to create (35%) Developers’ perspective Developers find it hard to capture and use sources of technical knowledge. Management perspective Managers worry about losing knowledge when an employee leaves and how long it takes for developers to find answers to questions about code 10 Less than half (46%) of developers expressed confidence in their company’s efficiency in sharing code knowledge - only 1% (!!!) said they are very successful. This indicates that the majority of organizations face difficulties in efficiently sharing and maintaining vital code knowledge among their engineering teams. As AI takes on more coding tasks, the necessity for effective knowledge transfer becomes even more critical. Poor knowledge sharing not only slows down productivityok but also risks confusion over code ownership and understanding. Devs doubt the efficiency of your knowledge sharing practices Chapter 6 1% Very successful 1% Very unsuccessful 45% Somewhat successful 18% Somewhat Unsuccessful 99% Not very successful 35% Neither successful nor Unsuccessful 11 Engineering organizations identified the key advantages of success technical knowledge sharing, with the main benefits being: 01. Quicker & easier refactoring or changing of infrastructure (39%) 02. Faster incident response (38%) 03. Promotion of best practices (38%) These data show an interesting trend: a margin of just 13% divides the most and least recognized benefits, highlighting the broad and diverse positive effects that effective code sharing can bring to an organization. Since each benefit was selected by at least 25% of respondents, it's evident that the strengths of solid knowledge sharing practices span several vital areas of organizational performance. Investment in knowledge sharing pays dividends Chapter 7 39% 38% 38% 36% 34% 32% 31% 27% 26% 0% Quicker and easier refactoring or changing of infrastructure Faster incident response Promoting our best practices Understanding legacy codebases Understanding integrations with 3rd parties Onboarding new developers faster A voiding bottlenecks and lost knowledge (low bus factor ) Making it easier to change code that hasn ’ t been touched recently Handing over projects between teams or individuals faster It has no impact 12 Nearly all (99%) of developers reported feeling the negative impact of insufficient or poor technical knowledge sharing within their organization.   The most common issues cited were: 01. Critical issues taking longer to fix (53%) 02. Issues in code quality (46%) 03. Significant reduction in team productivity (37%) These significant impacts highlight the critical need for effective knowledge sharing within organizations. Addressing these challenges by improving knowledge transfer can enhance efficiency, improve code quality, and boost team productivity, ultimately fostering a more productive and dynamic development environment. The organizational toll of ineffective knowledge sharing Chapter 8 53% 46% 37% 36% 35% 34% 30% 30% 1% Critical issues take longer to fix Code quality issues Team productivity is significantly reduced Onboarding new developers takes too long Developers are less happy Losing code knowledge with turnover Lead developers using too much time answering questions Handing over pro jects between teams or individuals takes too long It has no impact 13 Nearly ⅓ of companies surveyed are already using or starting to use AI tools to share knowledge about their code throughout their organization. While almost half (47%) aim to adopt these tools in the company year. A mere 1% has no plans to use AI soon.  This data is hardly surprising, especially considering the broader trend of AI tool adoption across the entire software development lifecycle. If you haven’t started planning your AI strategy, there is no time like the present. As more and more code is generated with AI, the need for tools that help developers understand and interpret the nuances and particularities of your codebase becomes even more mission critical.  Everyone’s doing it (AI, that is ) Chapter 9 1% Considering but not in the near future 26% Currently implementing 26% Currently implementing 30% Already using or currently implementing 47% Will implement within the next 12 months 4% Already using 14 Evaluating an AI tool The AI tool landscape continues to grow, with new advancements emerging daily. The integration of AI into the SDLC increasingly allows for higher levels of customization, making it essential to choose tools that can adapt to specific contexts and incorporate complex business and product logic seamlessly. A one size fits all approach doesn’t work when it comes to AI – businesses must look for AI solutions that offer a comprehensive package, combining innovation, flexibility, and the ability to meet the unique needs of their operations for maximum effectiveness. 15 The results are clear: developers want tools that keep sources of technical knowledge up to date (45%), managerial dashboards with usage metrics (42%), and capabilities for creating, editing, and discovering technical knowledge within the IDE (41%).  The emphasis on automatic updates highlights the need for tools that adapt and update in real-time, ensuring content remains current and accurate. Managerial dashboards with usage metrics reflect the need for better ways to measure the impact of knowledge sharing efforts.  Finally, integrating these features within the IDE is seen as essential, making it easier for developers to access information without disrupting their workflow by switching tools. What devs are looking for in a knowledge sharing tool Chapter 10 45% 42% 41% 37% 37% 32% 28% Automatically keeps document updated Includes managerial dashboards with usage metrics Ability to create, edit and find knowledge within the IDE (e.g. VS Code) Integrates into other platforms or websites Combining Gen AI with internal knowledge for a chat like experience Integration with task management platform (e.g. Jira) Creates code documents with AI 16 Demographics Chapter 11 Senior Manager Team member Director VP/Head 50% 24% 18% 8% Seniority: Software Engineer Dev experience Architect DevOps 46% 30% 14% 10% Title: 16% 14% 41% 37% 37% 32% 28% 28% 28% 28% 28% 28% 28% 28% 28% 28% 28% Banking Financial services Manufacturing Information Technology Software Development Insurance Retail & eCommerce Construction Health & Pharma Agriculture & mining Telecom Energy & Utilities Media Technology Transport & Logistics Food Travel & Hospitality Industry: More than 200 developers75-100 developers100-200 developers Number of developers in the company: 12% 38% 50% 17 The report highlights a critical but often overlooked aspect of software development: effective knowledge sharing. Regardless of whether a developer wrote the code or if it was generated using AI, managing and sharing knowledge is challenging yet essential, and many teams struggle to do it well – if they’re doing it at all. The solution lies in adopting AI-powered tools that integrate smoothly into the SDLC, catering specifically to an organization's unique technical needs. Engaging with developers to understand their challenges is vital in finding the right tool. The bottom line is clear: addressing knowledge sharing is urgent, and with AI, organizations have a powerful way to enhance their practices. Methodology Chapter 13 This report is based on a survey conducted online by Global Surveyz on behalf of Swimm throughout November 2023. It involved 200 full-time software engineers, as well as senior managers to VP-level personnel in engineering departments who work at companies with more than 75 developers across various industries. All respondents were residents of the United States at the time of the survey. Conclusion Chapter 12 18 Learn more about Swimm Swimm is an AI coding assistant that helps developers quickly understand big, complex codebases—and seamlessly captures knowledge to fill in any documentation gaps","libVersion":"0.3.2","langs":""}