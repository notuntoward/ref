{"path":"lit/sources/papers_added/papers/Jo19CopulabasedAlgorithmGenerating.pdf","text":"Copula-based algorithm for generating bursty time series Hang-Hyun Jo,1, 2, 3, ∗ Byoung-Hwa Lee, 2, 1 Takayuki Hiraoka, 1 and Woo-Sung Jung 2, 4, 1, † 1Asia Paciﬁc Center for Theoretical Physics, Pohang 37673, Republic of Korea 2Department of Physics, Pohang University of Science and Technology, Pohang 37673, Republic of Korea 3Department of Computer Science, Aalto University, Espoo FI-00076, Finland 4Department of Industrial and Management Engineering, Pohang University of Science and Technology, Pohang 37673, Republic of Korea (Dated: August 15, 2019) Dynamical processes in various natural and social phenomena have been described by a series of events or event sequences showing non-Poissonian, bursty temporal patterns. Temporal correlations in such bursty time series can be understood not only by heterogeneous interevent times (IETs) but also by correlations between IETs. Modeling and simulating various dynamical processes requires us to generate event sequences with a heavy-tailed IET distribution and memory eﬀects between IETs. For this, we propose a Farlie-Gumbel-Morgenstern copula-based algorithm for generating event sequences with correlated IETs when the IET distribution and the memory coeﬃcient between two consecutive IETs are given. We successfully apply our algorithm to the cases with heavy-tailed IET distributions. We also compare our algorithm to the existing shuﬄing method to ﬁnd that our algorithm outperforms the shuﬄing method for some cases. Our copula-based algorithm is expected to be used for more realistic modeling of various dynamical processes. I. INTRODUCTION Dynamical processes in various natural and social phe- nomena have been described by a series of events or event sequences showing non-Poissonian, bursty tempo- ral patterns. Examples include solar ﬂares [1], earth- quakes [2, 3], neuronal ﬁrings [4], and human activi- ties [5, 6]. Temporal correlations in such bursty time series can be understood not only by heterogeneous in- terevent times (IETs) but also by correlations between IETs [7, 8]. Here the IET, denoted by τ , is deﬁned as a time interval between two consecutive events. On the one hand, heterogeneities of IETs have been characterized by heavy-tailed or power-law IET distributions P (τ ) with a power-law exponent α [6]: P (τ ) ∼ τ −α. (1) On the other hand, the correlations between IETs can be characterized by a memory coeﬃcient [7] among other measures such as local variation [9] and a bursty train [10]. The memory coeﬃcient M is deﬁned as the Pearson correlation coeﬃcient between two consec- utive IETs, whose value for a sequence of n IETs, i.e., {τi}i=1,··· ,n, can be estimated by M ≡ 1 n − 1 n−1∑ i=1 (τi − µ1)(τi+1 − µ2) σ1σ2 , (2) where µ1 (µ2) and σ1 (σ2) are the average and the stan- dard deviation of the ﬁrst (last) n − 1 IETs, respectively. Positive M implies that the small (large) IETs tend to ∗ hang-hyun.jo@apctp.org † wsjung@postech.ac.kr be followed by small (large) IETs. Negative M implies the opposite tendency, while M = 0 is for the uncorre- lated IETs. We mainly focus on the case with positive M , based on the empirical observations [7, 11–13]. The dynamical processes, such as spreading and diﬀu- sion, taking place in a network of individuals are known to be strongly aﬀected by bursty interaction patterns be- tween individuals [14–22]. This topic has been studied in a framework of temporal networks [23, 24], where a link connecting two nodes is considered being existent or activated only at the moment of interaction. For ex- ample, an infectious disease, information, or a random walker on a node, say A, can be transferred to the A’s neighboring node, say B, only when A interacts with B. Therefore, the dynamical behavior, such as spreading speed, would be inﬂuenced by how often these nodes in- teract with each other, more generally, by the temporal interaction pattern between them. This temporal inter- action pattern can be described by the event sequence when each event denotes the interaction. Consequently, modeling and simulating realistic temporal networks of- ten requires us to generate event sequences for links (or nodes) showing the empirically observed properties, such as heavy-tailed IET distribution in Eq. (1) and/or mem- ory eﬀects measured by the memory coeﬃcient in Eq. (2). It is straightforward to generate event sequences char- acterized only by the IET distribution P (τ ), i.e., when IETs are fully uncorrelated with each other as in the re- newal process [25]: n IETs are independently drawn from the given P (τ ) to make a sequence of IETs, {τi}i=1,··· ,n. Provided that the ﬁrst event occurs at time t0, the events are considered to occur at times ti = t0 + ∑i i′=1 τi′ for i = 1, · · · , n. In contrast, the generative methods for event sequences with correlated IETs have not been fully explored, ex- cept for a few recent works. We focus on two existing methods: The ﬁrst method is to shuﬄe a set of IETs,arXiv:1904.08795v3 [physics.soc-ph] 14 Aug 2019 2 prepared using a given P (τ ), to implement the desired value of M in Eq. (2) [22]. By this method one can con- trol P (τ ) and M independently, while the shape of P (τ ) may set bounds on the range of M [12]. Note that for the implementation of this method, the number of IETs should be predetermined, which however is not necessar- ily the case. For example, let us consider the simulation of a dynamical process using the event sequence; it is often the case that how many IETs are to be needed for reaching a stationary state of the process may not be known a priori. The second method is to generate IETs sequentially using the conditional probability dis- tribution P (τ |τ ′) [21], by which a next IET τ is drawn given the previous IET τ ′. One can generate an arbitrary number of IETs without predetermining the number of IETs. However, since the function used in Ref. [21] is P (τ |τ ′) = α(1 + τ ′) α/(τ + τ ′) α+1, α controls both the heterogeneity of IETs and the degree of memory eﬀects, implying the inevitable dependency between the statis- tics of IETs and correlations between IETs. To overcome disadvantages in the previous methods, we propose an alternative generative method using the conditional probability distribution P (τ |τ ′) but based on the Farlie-Gumbel-Morgenstern copula [26, 27], by which one can generate an arbitrary number of IETs without predetermining the number of IETs, while the statis- tics of IETs and their correlations can be independently controlled. In Sec. II we introduce the copula-based al- gorithm for generating event sequences with correlated IETs. In Sec. III we apply our algorithm to the cases with exponential and power-law IET distributions as well as power-law IET distribution with exponential cutoﬀ, and we also discuss the performance of our algorithm for diﬀerent cases in terms of computational times, in com- parison to the shuﬄing method used in Ref. [22]. Finally, we conclude our work in Sec. IV. II. COPULA-BASED ALGORITHM We introduce the copula-based algorithm for gener- ating event sequences with correlated interevent times (IETs) for a given IET distribution P (τ ) and memory coeﬃcient M between two consecutive IETs. For this, we model the joint probability distribution P (τi, τi+1) by adopting a Farlie-Gumbel-Morgenstern (FGM) cop- ula among others [26, 27]. It is because the FGM copula is simple and analytically tractable, despite the range of correlation being somewhat limited, which will be dis- cussed below. The joint probability distribution based on the FGM copula is written as [28] P (τi, τi+1) = P (τi)P (τi+1) [1 + rf (τi)f (τi+1)] , (3) where f (τ ) ≡ 2F (τ ) − 1, F (τ ) ≡ ˆ τ 0 dτ ′P (τ ′). (4) time P(τ i+ 1 | τ i ) τ i τ i+ 1 τ 2 P(τ) τ 1 P(τ 2 | τ 1 ) ⋯ FIG. 1. Schematic diagram of the copula-based algorithm using a given interevent time (IET) distribution P (τ ) and a conditional probability distribution P (τi+1|τi) for two consec- utive IETs in Eq. (7). Here F (τ ) denotes the cumulative distribution function (CDF) of P (τ ), and P (τi) and P (τi+1) are assumed to have the same functional form. The parameter r, con- trolling the correlation between two consecutive IETs, is in the range of −1 ≤ r ≤ 1 because P (τi, τi+1) ≥ 0 and 0 ≤ F (τ ) ≤ 1, hence −1 ≤ f (τ ) ≤ 1. It is straightfor- ward to relate r with the memory coeﬃcient M in Eq. (2) using the FGM copula in Eq. (3) as follows: M ≃ ⟨τiτi+1⟩ − µ 2 σ2 = r σ2 [ˆ ∞ 0 dτ τ P (τ )f (τ )]2 ≡ ar, (5) where ⟨τiτi+1⟩ ≡ ˆ ∞ 0 dτi ˆ ∞ 0 dτi+1τiτi+1P (τi, τi+1), (6) and µ and σ are the mean and standard deviation of IETs, respectively. The positive constant a is determined only by P (τ ), irrespective of M . The upper bound of a is 1/3 for any P (τ ) as proven in Ref. [29], i.e., |M | ≤ a = 1/3. Despite such relatively weak correlations by the FGM copula, one can still study the FGM copula as the empirical values of |M | tend to be relatively small in several cases [7, 11, 12]. Using the joint probability distribution in Eq. (3), one can get the conditional probability distribution of τi+1 for a given τi: P (τi+1|τi) = P (τi, τi+1) P (τi) = P (τi+1) [1 + rf (τi)f (τi+1)] . (7) In order to draw a value of τi+1 from P (τi+1|τi), we use the inverse transform sampling or transformation method [30]: For a random number x drawn from a uni- form distribution deﬁned in 0 ≤ x < 1, we obtain τi+1 for a given τi by solving the equation 1 − x = F (τi+1|τi), (8) where F (τi+1|τi) ≡ ˆ τi+1 0 dτ ′P (τ ′|τi). (9) 3 For convenience, we deﬁne ci ≡ rf (τi) = r[2F (τi) − 1], (10) to rewrite Eq. (9) as F (τi+1|τi) = (1 − ci) ˆ τi+1 0 dτ ′P (τ ′) + 2ci ˆ τi+1 0 dτ ′P (τ ′)F (τ ′) = (1 − ci)F (τi+1) + ciF (τi+1) 2. (11) Then from Eq. (8) with y ≡ F (τi+1), one gets ciy2 + (1 − ci)y + x − 1 = 0, (12) leading to τi+1 = F −1 [ ci − 1 + √ (ci + 1)2 − 4cix 2ci ] , (13) where F −1 denotes the inverse function of F (τ ). The sign of the square root was chosen to be “+” for satisfying y = 1 for x = 0 and y → 0 for x → 1. By our copula-based algorithm, one can generate the event sequence without predetermining the number of IETs as well as with P (τ ) and M being controlled in- dependently. The generating procedure is as depicted in Fig. 1: We randomly draw the ﬁrst IET from P (τ ), denoted by τ1. Then τi is used to generate τi+1 using P (τi+1|τi) or Eq. (13) with a random number x indepen- dently drawn for each i = 1, 2, · · · . This algorithm can be called Markovian in the sense that τi+1 depends only on τi but not on τi′ with i ′ < i. III. RESULTS We apply the copula-based algorithm to three well- known interevent time (IET) distributions, i.e., exponen- tial and power-law IET distributions as well as power-law IET distribution with exponential cutoﬀ. We also test the performance of our algorithm for these three cases, in comparison to the shuﬄing method [22]. A. Exponential IET distribution As a simple example, we consider the exponential IET distribution with the mean IET µ: P (τ ) = µ −1e−τ /µ, (14) F (τ ) = 1 − e −τ /µ, (15) from which we get r = 4M. (16) This implies that |M | ≤ 1/4 by Eq. (5). The conditional probability distribution in Eq. (7) is written as P (τi+1|τi) = µ −1e−τi+1/µ × [ 1 + 4M (1 − 2e−τi/µ)(1 − 2e−τi+1/µ) ] . (17) 10-7 10-6 10-5 10-4 10-3 10-2 100 101 102 103 (a)P(τi+1|τi) τi+1 τi=2 τi=8 τi=32 τi=128 10-7 10-6 10-5 10-4 10-3 10-2 100 101 102 103 (b) µ=100, M=0.1P(τ) τ 10-10 10-7 10-4 10-1 100 101 102 103 (c)P(τi+1|τi) τi+1 τi=2 τi=4 τi=8 τi=16 10-10 10-7 10-4 10-1 100 101 102 103 (d) α=3.5, M=0.07P(τ) τ 10-10 10-7 10-4 10-1 102 100 101 102 103 104 (e)P(τi+1|τi) τi+1 τi=2 τi=4 τi=8 τi=16 10-10 10-7 10-4 10-1 102 100 101 102 103 104 (f) α=2.1, τc=10 3, M=0.015P(τ) τ FIG. 2. Numerical results of the copula-based algorithm: Conditional probability distributions P (τi+1|τi) for several values of τi (left) and the resultant IET distribution (right) for the exponential case in Eq. (14) with µ = 100 and M = 0.1 (top), for the power-law case in Eq. (20) with α = 3.5 and M = 0.07 (middle), and for the case of power law with ex- ponential cutoﬀ in Eq. (26) with α = 2.1, τc = 10 3, and M = 0.015 (bottom) are compared to analytical curves in Eqs. (17), (14), (23), (20), (28), and (26) (from a to f), re- spectively. In (a), the solid and dashed curves correspond to τi = 2 and 128, respectively. In (c,e) the solid and dashed curves correspond to τi = 2 and 16, respectively. In (a,b) the curves are linearly binned, while the curves in (c–f) are all log-binned. Numerical results are averaged over 100 event sequences of size n = 105. Then from Eq. (13) we obtain τi+1 for a given τi and a random number x as τi+1 = µ ln [ 2ci ci + 1 − √ (ci + 1)2 − 4cix ] , (18) where ci = rf (τi) = 4M (1 − 2e−τi/µ). (19) For the demonstration, we generate 100 event se- quences of size n = 105 for µ = 100 and M = 0.1 to analyze them by measuring the conditional probability distributions and the resultant IET distribution, which 4 are comparable to the corresponding analytical curves, as shown in Fig. 2(a,b). We also measure the memory coeﬃcient M = 0.100(4) from the same generated event sequences, which is in good agreement with the input value of 0.1. B. Power-law IET distribution Next, we study the case with a power-law IET distri- bution with power-law exponent α: P (τ ) = (α − 1)τ −αθ(τ − 1), (20) F (τ ) = (1 − τ 1−α)θ(τ − 1), (21) where θ(·) denotes the Heaviside step function and the lower bound of IET has been set to be 1. We assume that α > 3 for the ﬁnite variance of IETs. The relation between r and M is obtained as r = (2α − 3) 2 (α − 1)(α − 3) M. (22) The conditional probability distribution in Eq. (7) for τi ≥ 1 and τi+1 ≥ 1 is written as P (τi+1|τi) = (α − 1)τ −α i+1 × [1 + (2α−3)2 (α−1)(α−3) M (1 − 2τ 1−α i )(1 − 2τ 1−α i+1 ) ] . (23) Then from Eq. (13), we obtain τi+1 for a given τi and a random number x as τi+1 = [ 2ci ci + 1 − √(ci + 1)2 − 4cix ]1/(α−1) . (24) where ci = rf (τi) = (2α − 3)2 (α − 1)(α − 3) M (1 − 2τ 1−α i ). (25) Using our copula-based algorithm we generate 100 event sequences of size n = 10 5 for α = 3.5 and M = 0.07. Note that α = 3.5 leads to |M | ≤ a = 5/64 ≈ 0.078. From the generated event sequences the conditional prob- ability distributions and the resultant IET distribution are measured and compared to the corresponding ana- lytical curves, as shown in Fig. 2(c,d). We also ﬁnd the measured memory coeﬃcient M = 0.08(1) comparable to the input value of 0.07. C. Power-law IET distribution with exponential cutoﬀ As a more realistic case evidenced by empirical re- sults [6], we consider a power-law IET distribution with exponential cutoﬀ τc as P (τ ) = τ α−1 c Γ (1 − α, 1/τc) τ −αe−τ /τcθ(τ − 1), (26) F (τ ) = [ 1 − Γ (1 − α, τ /τc) Γ (1 − α, 1/τc) ] θ(τ − 1), (27) where Γ(·, ·) is the upper incomplete Gamma function and the lower bound of IET has been set to be 1. Note that the IET distribution in Eq. (26) reduces to that in Eq. (20) in the limit of τc → ∞, or to that in Eq. (14) if α = 0 and the lower bound of IET is set to be 0. In con- trast to the exponential and power-law cases, in the case of power law with exponential cutoﬀ the analytic calcu- lation of the integration in Eq. (5) is not straightforward, hence a in Eq. (5) will be numerically evaluated. With this numerical value of a, the conditional probability dis- tribution in Eq. (7) is written as P (τi+1|τi) = τ α−1 c Γ(1−α,1/τc) τ −α i+1e−τi+1/τc × {1 + M a [1 − 2 Γ(1−α,τi/τc) Γ(1−α,1/τc) ] [ 1 − 2 Γ(1−α,τi+1/τc) Γ(1−α,1/τc) ]} . (28) Then the value of τi+1 can be obtained for a given τi ≥ 1 and a random number x by numerically solving Eq. (13), namely, Γ(1 − α, τi+1/τc) Γ(1 − α, 1/τc) = ci + 1 − √ (ci + 1)2 − 4cix 2ci , (29) where ci = rf (τi) = M a [ 1 − 2 Γ (1 − α, τi/τc) Γ (1 − α, 1/τc) ] . (30) We generate 100 event sequences of size n = 10 5 for α = 2.1, τc = 10 3, and M = 0.015. Note that for α = 2.1 and τc = 103, we have |M | ≤ a ≈ 0.020. The generated event sequences are analyzed to result in the conditional probability distributions and the resultant IET distribu- tion that are comparable to the corresponding analytical curves, as shown in Fig. 2(e,f). The measured memory coeﬃcient M = 0.015(5) is found to be close to the input value of 0.015. All these results indicate that the cor- relations between two consecutive IETs are successfully implemented. D. Computation times We discuss the performance of our algorithm in terms of computation times for generating event sequences with correlated IETs. For the exponential and power-law IET distributions, the generation of event sequences is easy and fast, while for the power-law IET distribution with exponential cutoﬀ (“power+cutoﬀ” in short) one needs to numerically solve Eq. (29) for the generation of each IET, implying longer computation times than other cases. To study this issue, we measure the average computation times in seconds for generating event sequences. We use codes written in C on a Linux system with 3.5 GHz Intel Core i5-7600 CPU and 16 GB RAM. We also use GNU Scientiﬁc Library for calculating the incomplete Gamma function, e.g., in Eqs. (29) and (30). 5 10-3 10-2 10-2 10-1 (a)time (second) M copula shuffle 10-3 10-2 10-1 10-3 10-2 (b) M 10-1 100 101 102 10-2 (c) M 10-4 10-3 10-2 104 105 (d)time (second) n 10-4 10-3 10-2 10-1 104 105 (e) n 10-2 10-1 100 101 104 105 (f) n FIG. 3. Average computation times in seconds for generating an event sequence using the copula-based algorithm (square) and the shuﬄing method (triangle) for the exponential case (a, d), the power-law case (b, e), and the case of power law with exponential cutoﬀ (“power+cutoﬀ” in short) (c, f). In panels (a–c), the computation times for various values of pa- rameters (see the text) are plotted as a function of M for n = 105. In panels (d–f), we show the n-dependence of com- putation times when the event sequences are generated using the same parameter values as in Fig. 2, where the dashed line of y = x is for guiding the eye. Each point is averaged over 100 event sequences for exponential and power-law cases and 10 event sequences for the power+cutoﬀ case. We test various combinations of parameter values for the estimation of computation times when n = 10 5 is ﬁxed. For the exponential case, we use µ = 10, 102, 103 and M = 0.01, 0.03, 0.1, 0.2. For the power-law case, we use α = 3.3, 3.5, 4 and M = 0.001, 0.01, 0.03, 0.07. For the power+cutoﬀ case, α = 2.1, 2.5, 2.9 and M = 0.005, 0.01, 0.015 are used for a ﬁxed τc = 10 3. Fig- ure 3(a–c) shows that the average computation times in the power+cutoﬀ case are larger than those for other two cases, as expected. We observe that the computa- tion times are linearly increasing with n in Fig. 3(d–f), which is trivial for the copula-based algorithm. We now compare the computation times of the copula- based algorithm to those of the shuﬄing method in Ref. [22]. For implementing the shuﬄing method, we ﬁrst draw n random values from P (τ ) to make an IET se- quence T ≡ {τi}i=1,··· ,n. Using the deﬁnition of Eq. (2), we measure the memory coeﬃcient from T , denoted by ˜M . Two IETs are randomly chosen in T and swapped only when this swapping makes ˜M closer to M , i.e., the target value. By repeating the swapping, we can obtain the IET sequence whose ˜M is close enough to M . Pre- cisely, the swapping stops when |M − ˜M | < ϵ with a small number ϵ. The computation times for generating event sequences 10-7 10-6 10-5 10-4 10-3 10-2 100 101 102 103 (a)P(τi+1|τi) τi+1 τi=2 τi=8 τi=32 τi=128 10-7 10-6 10-5 10-4 10-3 10-2 100 101 102 103 (b) µ=100, M=0.1P(τ) τ 10-10 10-7 10-4 10-1 100 101 102 103 (c)P(τi+1|τi) τi+1 τi=2 τi=4 τi=8 τi=16 10-10 10-7 10-4 10-1 100 101 102 103 (d) α=3.5, M=0.07P(τ) τ 10-10 10-7 10-4 10-1 102 100 101 102 103 104 (e)P(τi+1|τi) τi+1 τi=2 τi=4 τi=8 τi=16 10-10 10-7 10-4 10-1 102 100 101 102 103 104 (f) α=2.1, τc=10 3, M=0.015P(τ) τ FIG. 4. Numerical results of the shuﬄing method with the same parameter values as in Fig. 2, with ϵ = 10−3. by the shuﬄing method are estimated for the same com- binations of parameter values as in the copula-based algo- rithm, together with several values of ϵ = 0.001, · · · , 0.02. Note that the computation time for the shuﬄing method is the sum of the time for generating the initial set of IETs for each given IET distribution and the time for the shuﬄing procedure. In Fig. 3(a–c) we ﬁnd that the copula-based algorithm outperforms the shuﬄing method only for the power+cutoﬀ case by a factor of 10, while for the exponential and power-law cases the shuﬄing method is around twice faster than the copula-based al- gorithm. Therefore, the shuﬄing procedure itself seems relatively fast. Then much slower generation by the shuf- ﬂing method in the power+cutoﬀ case could be due to the longer time for generating the initial set of IETs us- ing Eq. (26) [31]. We also ﬁnd that the computation times for the shuﬄing method are mostly insensitive to the variation of parameter values, except for the eﬀect of M in the exponential and power-law cases. This can be explained by the fact that the initial sequence of IETs drawn from P (τ ) is uncorrelated, i.e., ˜M ≈ 0, imply- ing that it takes longer time to reach the larger target value of M . Such M -dependence is not apparent in the power+cutoﬀ case probably due to the dominant eﬀects of the time for generating the initial set of IETs. In 6 addition, the computation times turn out to be linearly increasing with n in Fig. 3(d–f) as in the copula-based algorithm. Finally the quality of event sequences generated by the shuﬄing method is tested by measuring the conditional probability distribution P (τi+1|τi) and the IET distri- bution P (τ ) from the generated event sequences using the same parameter values as in Fig. 2. Here we choose ϵ = 10 −3 which is of the order of the standard deviations of estimated M in the case with the copula-based algo- rithm. In Fig. 4 we ﬁnd almost the same behaviors as in the results from the copula-based algorithm, implying that the copula-based algorithm and the shuﬄing method can be used interchangeably. It might be due to the fact that both methods are designed to implement only the correlations between two consecutive IETs for a given IET distribution, while randomizing or ignoring all other higher-order correlations between IETs. In this sense, another generative method called the Laplace Gillespie algorithm (LGA) [32] can also be compared to our al- gorithm and shuﬄing method as it can generate event sequences with correlated IETs. However, we leave this comparison as a future work mainly because ﬁne-tuning the value of M by the LGA seems to be diﬃcult. IV. CONCLUSION We have proposed the Farlie-Gumbel-Morgenstern (FGM) copula-based algorithm for generating event se- quences with correlated interevent times (IETs) for a given IET distribution and a given memory coeﬃcient be- tween two consecutive IETs. This is to overcome the dis- advantages in the previous generative methods, i.e., the shuﬄing method in Ref. [22] and the method using condi- tional probability distribution in Ref. [21]: By adopting the conditional probability distribution P (τi+1|τi) based on the FGM copula [26, 27], one can generate an arbi- trary number of IETs without predetermining the num- ber of IETs, while the statistics of IETs and their correla- tions can be independently controlled. After deriving the analytical forms of the next IET τi+1 for a given previous IET τi, we show that our algorithm successfully generates the event sequences with desired statistical properties. We also compare the performance of our copula-based algorithm to the shuﬄing method in terms of computa- tion times: It turns out that the copula-based algorithm outperforms the shuﬄing method for generating event sequences with power-law IET distributions with expo- nential cutoﬀ, while for the exponential and power-law IET distributions the shuﬄing method is around twice faster than the copula-based algorithm. We note that since both methods generate event sequences of the same statistical properties, any of them can be used appropri- ately. Considering the advantages of our algorithm, we expect our algorithm to be used for modeling and simu- lating more realistic event sequences, eventually for more realistic temporal networks. Finally we remark on the limited range of M . Apart from the bounds of M set by the shape of P (τ ) [12], the range of M is also bounded due to the form of the FGM copula, while it is more ﬂexible in the shuﬄing method. Therefore, other members of the FGM family, e.g., the iterated FGM copula [33], can be investigated to explore a wider range of M for the IET distributions of our in- terest as a future work. In addition, our copula-based algorithm can be used to generate any other sequence of correlated variables. ACKNOWLEDGMENTS H.-H.J. was supported by Basic Science Research Pro- gram through the National Research Foundation of Ko- rea (NRF) funded by the Ministry of Education (NRF- 2018R1D1A1A09081919). W.-S.J. was supported by Ba- sic Science Research Program through the National Re- search Foundation of Korea (NRF) funded by the Min- istry of Education (2016R1D1A1B03932590). [1] M. S. Wheatland, P. A. Sturrock, and J. M. McTiernan, The Astrophysical Journal 509, 448 (1998). [2] ´A. Corral, Physical Review Letters 92, 108501 (2004). [3] L. de Arcangelis, C. Godano, E. Lippiello, and M. Nicodemi, Physical Review Letters 96, 051102 (2006). [4] T. Kemuriyama, H. Ohta, Y. Sato, S. Maruyama, M. Tandai-Hiruma, K. Kato, and Y. Nishida, BioSys- tems 101, 144 (2010). [5] A.-L. Barab´asi, Nature 435, 207 (2005). [6] M. Karsai, H.-H. Jo, and K. Kaski, Bursty Human Dy- namics (Springer International Publishing, Cham, 2018). [7] K.-I. Goh and A.-L. Barab´asi, EPL (Europhysics Letters) 81, 48002 (2008). [8] H.-H. Jo, Physical Review E 96, 062131 (2017). [9] S. Shinomoto, K. Shima, and J. Tanji, Neural Compu- tation 15, 2823 (2003). [10] M. Karsai, K. Kaski, A.-L. Barab´asi, and J. Kert´esz, Scientiﬁc Reports 2, 397 (2012). [11] W. Wang, N. Yuan, L. Pan, P. Jiao, W. Dai, G. Xue, and D. Liu, Physica A: Statistical Mechanics and its Ap- plications 436, 846 (2015). [12] F. Guo, D. Yang, Z. Yang, Z.-D. Zhao, and T. Zhou, Physical Review E 95, 052314 (2017). [13] L. B¨ottcher, O. Woolley-Meza, and D. Brockmann, PLoS ONE 12, e0178062 (2017). [14] A. Vazquez, Physica A: Statistical Mechanics and its Ap- plications 373, 747 (2007). [15] M. Karsai, M. Kivel¨a, R. K. Pan, K. Kaski, J. Kert´esz, A.-L. Barab´asi, and J. Saram¨aki, Physical Review E 83, 025102(R) (2011). [16] G. Miritello, E. Moro, and R. Lara, Physical Review E 83, 045102(R) (2011). 7 [17] L. E. C. Rocha, F. Liljeros, and P. Holme, PLOS Com- putational Biology 7, e1001109 (2011). [18] H.-H. Jo, J. I. Perotti, K. Kaski, and J. Kert´esz, Physical Review X 4, 011041 (2014). [19] J. I. Perotti, H.-H. Jo, P. Holme, and J. Saram¨aki, “Tem- poral network sparsity and the slowing down of spread- ing,” (2014), arXiv:1411.5553. [20] J.-C. Delvenne, R. Lambiotte, and L. E. C. Rocha, Na- ture Communications 6, 7366 (2015). [21] O. Artime, J. J. Ramasco, and M. San Miguel, Scientiﬁc Reports 7, 41627 (2017). [22] T. Hiraoka and H.-H. Jo, Scientiﬁc Reports 8, 15321 (2018). [23] P. Holme and J. Saram¨aki, Physics Reports 519, 97 (2012). [24] N. Masuda and R. Lambiotte, A guide to temporal net- works, Series on complexity science (World Scientiﬁc, New Jersey, 2016). [25] F. Mainardi, R. Gorenﬂo, and A. Vivoli, Journal of Com- putational and Applied Mathematics 205, 725 (2007). [26] R. B. Nelsen, An Introduction to Copulas, Springer Series in Statistics (Springer New York, New York, NY, 2006). [27] T. T. Takeuchi, Monthly Notices of the Royal Astronom- ical Society 406, 1830 (2010). [28] The FGM copula is a function C joining a bivari- ate cumulative distribution function (CDF) to their one-dimensional marginal CDFs such that G(x, y) = C[u(x), v(y)] = uv[1 + r(1 − u)(1 − v)], where u and v are CDFs of variables x and y, respectively [26, 27]. Then the bivariate probability distribution function (PDF) of x and y is obtained by ∂2G ∂x∂y = P1(x)P2(y)[1 + r(2u − 1)(2v − 1)], where P1(x) and P2(y) denote PDFs of x and y, respectively. The FGM copula for IETs has recently been found to be useful for the analytical approach to autocorrelation functions [34]. [29] W. R. Schucany, W. C. Parr, and J. E. Boyer, Biometrika 65, 650 (1978). [30] A. Clauset, C. R. Shalizi, and M. E. J. Newman, SIAM Review 51, 661 (2009). [31] To generate the IETs from the power-law distribution with exponential cutoﬀ, we have used the method de- scribed in Ref. [30], which indeed requires one more ran- dom number per each IET than the cases with exponen- tial and power-law IET distributions. [32] N. Masuda and L. E. C. Rocha, SIAM Review 60, 95 (2018). [33] J. S. Huang and S. Kotz, Biometrika 71, 633 (1984). [34] H.-H. Jo, Physical Review E 100, 012306 (2019).","libVersion":"0.3.1","langs":""}