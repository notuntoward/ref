/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ListOutlineHelperPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
function getOutlineDepth(lineText) {
  const whitespacePrefix = /^\s*/.exec(lineText);
  if (whitespacePrefix) {
    return whitespacePrefix[0].length;
  } else
    return 0;
}
function selectOutline(editor) {
  const { line } = editor.getCursor();
  const lineText = editor.getLine(line);
  const outlineLevel = getOutlineDepth(lineText);
  let lastLine = line;
  for (let i = line + 1; i < editor.lineCount() && getOutlineDepth(editor.getLine(i)) > outlineLevel; i++) {
    lastLine = i;
  }
  const selectionEnd = lastLine + 1 < editor.lineCount() ? { line: lastLine + 1, ch: 0 } : { line: lastLine, ch: editor.getLine(lastLine).length };
  editor.setSelection({ line, ch: 0 }, selectionEnd);
}
var ListOutlineHelperPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "select-current-list-outline",
      name: "Select current list outline",
      editorCallback: (editor) => {
        selectOutline(editor);
      }
    });
  }
  onunload() {
  }
};
