/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MultiTabPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/AddPropModal.ts
var import_obsidian = require("obsidian");
var AddPropModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Add Property to Selected Tabs");
    new import_obsidian.Setting(contentEl).setName("Property Name").addText((text) => text.onChange((value) => {
      this.propertyName = value;
    }));
    new import_obsidian.Setting(contentEl).setName("Property Value").addText((text) => text.onChange((value) => {
      this.propertyValue = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Add").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.propertyName, this.propertyValue);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/RemovePropModal.ts
var import_obsidian2 = require("obsidian");
var RemovePropModal = class extends import_obsidian2.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Remove Property from Selected Tabs");
    new import_obsidian2.Setting(contentEl).setName("Property Name").addText((text) => text.onChange((value) => {
      this.propertyName = value;
    }));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Remove").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.propertyName);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/AddTagModal.ts
var import_obsidian3 = require("obsidian");
var AddTagModal = class extends import_obsidian3.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Add Tag to Selected Tabs");
    new import_obsidian3.Setting(contentEl).setName("Tag Name").addText((text) => text.onChange((value) => {
      this.tagName = value;
    }));
    new import_obsidian3.Setting(contentEl).addButton((btn) => btn.setButtonText("Add").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.tagName);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/RemoveTagModal.ts
var import_obsidian4 = require("obsidian");
var RemoveTagModal = class extends import_obsidian4.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Remove Tag from Selected Tabs");
    new import_obsidian4.Setting(contentEl).setName("Tag Name").addText((text) => text.onChange((value) => {
      this.tagName = value;
    }));
    new import_obsidian4.Setting(contentEl).addButton((btn) => btn.setButtonText("Remove").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.tagName);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/RenameTagModal.ts
var import_obsidian5 = require("obsidian");
var RenameTagModal = class extends import_obsidian5.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Rename Tag in Selected Tabs");
    new import_obsidian5.Setting(contentEl).setName("Old Tag Name").addText((text) => text.onChange((value) => {
      this.oldTagName = value;
    }));
    new import_obsidian5.Setting(contentEl).setName("New Tag Name").addText((text) => text.onChange((value) => {
      this.newTagName = value;
    }));
    new import_obsidian5.Setting(contentEl).addButton((btn) => btn.setButtonText("Rename").setCta().onClick(() => {
      this.close();
      this.onSubmit(this.oldTagName, this.newTagName);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var MultiTabPlugin = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this.selectedTabs = /* @__PURE__ */ new Set();
    this.lastActiveTab = null;
  }
  async onload() {
    console.log("loading multi-tab plugin");
    this.addCommand({
      id: "add-property-to-selected-tabs",
      name: "Add Property to Selected Tabs",
      callback: () => {
        new AddPropModal(this.app, (name, value) => {
          this.addPropertyToTabs(this.selectedTabs, name, value);
        }).open();
      }
    });
    this.addCommand({
      id: "remove-property-from-selected-tabs",
      name: "Remove Property from Selected Tabs",
      callback: () => {
        new RemovePropModal(this.app, (name) => {
          this.removePropertyFromTabs(this.selectedTabs, name);
        }).open();
      }
    });
    this.addCommand({
      id: "add-tag-to-selected-tabs",
      name: "Add Tag to Selected Tabs",
      callback: () => {
        new AddTagModal(this.app, (name) => {
          this.addTagToTabs(this.selectedTabs, name);
        }).open();
      }
    });
    this.addCommand({
      id: "remove-tag-from-selected-tabs",
      name: "Remove Tag from Selected Tabs",
      callback: () => {
        new RemoveTagModal(this.app, (name) => {
          this.removeTagFromTabs(this.selectedTabs, name);
        }).open();
      }
    });
    this.addCommand({
      id: "rename-tag-in-selected-tabs",
      name: "Rename Tag in Selected Tabs",
      callback: () => {
        new RenameTagModal(this.app, (oldName, newName) => {
          this.renameTagInTabs(this.selectedTabs, oldName, newName);
        }).open();
      }
    });
    this.addCommand({
      id: "add-property-to-all-tabs-in-window",
      name: "Add Property to All Tabs in Window",
      callback: () => {
        new AddPropModal(this.app, (name, value) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.addPropertyToTabs(leaves, name, value);
        }).open();
      }
    });
    this.addCommand({
      id: "remove-property-from-all-tabs-in-window",
      name: "Remove Property from All Tabs in Window",
      callback: () => {
        new RemovePropModal(this.app, (name) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.removePropertyFromTabs(leaves, name);
        }).open();
      }
    });
    this.addCommand({
      id: "add-tag-to-all-tabs-in-window",
      name: "Add Tag to All Tabs in Window",
      callback: () => {
        new AddTagModal(this.app, (name) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.addTagToTabs(leaves, name);
        }).open();
      }
    });
    this.addCommand({
      id: "remove-tag-from-all-tabs-in-window",
      name: "Remove Tag from All Tabs in Window",
      callback: () => {
        new RemoveTagModal(this.app, (name) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.removeTagFromTabs(leaves, name);
        }).open();
      }
    });
    this.addCommand({
      id: "rename-tag-in-all-tabs-in-window",
      name: "Rename Tag in All Tabs in Window",
      callback: () => {
        new RenameTagModal(this.app, (oldName, newName) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.renameTagInTabs(leaves, oldName, newName);
        }).open();
      }
    });
    this.addCommand({
      id: "add-property-to-all-tabs",
      name: "Add Property to All open Tabs",
      callback: () => {
        new AddPropModal(this.app, (name, value) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.addPropertyToTabs(leaves, name, value);
        }).open();
      }
    });
    this.addCommand({
      id: "remove-property-from-all-tabs",
      name: "Remove Property from All open Tabs",
      callback: () => {
        new RemovePropModal(this.app, (name) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.removePropertyFromTabs(leaves, name);
        }).open();
      }
    });
    this.addCommand({
      id: "add-tag-to-all-tabs",
      name: "Add Tag to All open Tabs",
      callback: () => {
        new AddTagModal(this.app, (name) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.addTagToTabs(leaves, name);
        }).open();
      }
    });
    this.addCommand({
      id: "remove-tag-from-all-tabs",
      name: "Remove Tag from All open Tabs",
      callback: () => {
        new RemoveTagModal(this.app, (name) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.removeTagFromTabs(leaves, name);
        }).open();
      }
    });
    this.addCommand({
      id: "rename-tag-in-all-tabs",
      name: "Rename Tag in All open Tabs",
      callback: () => {
        new RenameTagModal(this.app, (oldName, newName) => {
          const leaves = this.app.workspace.getLeavesOfType("markdown");
          this.renameTagInTabs(leaves, oldName, newName);
        }).open();
      }
    });
    this.registerDomEvent(document, "mousedown", (evt) => {
      const target = evt.target;
      const tabHeader = target.closest(".workspace-tab-header");
      if (tabHeader) {
        const leaf = this.getLeafFromHeader(tabHeader);
        if (leaf) {
          this.handleTabSelection(leaf, evt.ctrlKey, evt.shiftKey);
        }
      }
    });
    this.registerDomEvent(document, "dragstart", (evt) => {
      var _a;
      const target = evt.target;
      const tabHeader = target.closest(".workspace-tab-header");
      if (tabHeader && this.selectedTabs.size > 0) {
        const leaf = this.getLeafFromHeader(tabHeader);
        if (leaf && this.selectedTabs.has(leaf)) {
          const filePaths = this.getSelectedFilePaths();
          (_a = evt.dataTransfer) == null ? void 0 : _a.setData("text/plain", JSON.stringify(filePaths));
          console.log("drag started with files:", filePaths);
        }
      }
    });
    this.registerDomEvent(document, "drop", (evt) => {
      var _a;
      const target = evt.target;
      if (target.tagName === "BODY") {
        const filePaths = JSON.parse(((_a = evt.dataTransfer) == null ? void 0 : _a.getData("text/plain")) || "[]");
        if (filePaths.length > 0) {
          const newWindow = this.app.workspace.openPopoutLeaf();
          filePaths.forEach((path) => {
            const file = this.app.vault.getAbstractFileByPath(path);
            if (file instanceof import_obsidian6.TFile) {
              newWindow.openFile(file);
            }
          });
        }
      }
    });
  }
  onunload() {
    console.log("unloading multi-tab plugin");
    this.clearSelection();
  }
  getLeafFromHeader(header) {
    const leafId = header.getAttribute("data-leaf-id");
    if (leafId) {
      return this.app.workspace.getLeafById(leafId);
    }
    return null;
  }
  handleTabSelection(leaf, ctrlKey, shiftKey) {
    if (shiftKey && this.lastActiveTab) {
      this.handleShiftClick(leaf);
    } else if (ctrlKey) {
      if (this.selectedTabs.has(leaf)) {
        this.deselectTab(leaf);
      } else {
        this.selectTab(leaf);
        this.lastActiveTab = leaf;
      }
    } else {
      this.clearSelection();
      this.selectTab(leaf);
      this.lastActiveTab = leaf;
    }
  }
  handleShiftClick(leaf) {
    if (!this.lastActiveTab || this.lastActiveTab.parent !== leaf.parent) {
      this.clearSelection();
      this.selectTab(leaf);
      this.lastActiveTab = leaf;
      return;
    }
    const parent = leaf.parent;
    if (!parent || !("children" in parent)) {
      return;
    }
    const children = parent.children;
    const lastActiveIndex = children.indexOf(this.lastActiveTab);
    const currentIndex = children.indexOf(leaf);
    if (lastActiveIndex === -1 || currentIndex === -1) {
      return;
    }
    const start = Math.min(lastActiveIndex, currentIndex);
    const end = Math.max(lastActiveIndex, currentIndex);
    this.clearSelection();
    for (let i = start; i <= end; i++) {
      this.selectTab(children[i]);
    }
  }
  selectTab(leaf) {
    this.selectedTabs.add(leaf);
    const tabHeader = leaf.view.containerEl.closest(".workspace-tab-header");
    if (tabHeader) {
      tabHeader.addClass("is-selected");
      tabHeader.setAttribute("draggable", "true");
    }
    console.log("selected tabs:", this.selectedTabs);
  }
  deselectTab(leaf) {
    this.selectedTabs.delete(leaf);
    const tabHeader = leaf.view.containerEl.closest(".workspace-tab-header");
    if (tabHeader) {
      tabHeader.removeClass("is-selected");
      tabHeader.removeAttribute("draggable");
    }
    console.log("selected tabs:", this.selectedTabs);
  }
  clearSelection() {
    this.selectedTabs.forEach((leaf) => {
      const tabHeader = leaf.view.containerEl.closest(".workspace-tab-header");
      if (tabHeader) {
        tabHeader.removeClass("is-selected");
        tabHeader.removeAttribute("draggable");
      }
    });
    this.selectedTabs.clear();
    console.log("selection cleared");
  }
  getSelectedFilePaths() {
    const filePaths = [];
    this.selectedTabs.forEach((leaf) => {
      var _a;
      const viewState = leaf.getViewState();
      if (viewState.type === "markdown" && ((_a = viewState.state) == null ? void 0 : _a.file) && typeof viewState.state.file === "string") {
        const file = this.app.vault.getAbstractFileByPath(viewState.state.file);
        if (file instanceof import_obsidian6.TFile) {
          filePaths.push(file.path);
        }
      }
    });
    return filePaths;
  }
  async addPropertyToTabs(leaves, name, value) {
    for (const leaf of leaves) {
      const view = leaf.view;
      if (view instanceof import_obsidian6.MarkdownView) {
        const file = view.file;
        if (file) {
          await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
            frontmatter[name] = value;
          });
        }
      }
    }
  }
  async removePropertyFromTabs(leaves, name) {
    for (const leaf of leaves) {
      const view = leaf.view;
      if (view instanceof import_obsidian6.MarkdownView) {
        const file = view.file;
        if (file) {
          await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
            delete frontmatter[name];
          });
        }
      }
    }
  }
  async addTagToTabs(leaves, tag) {
    for (const leaf of leaves) {
      const view = leaf.view;
      if (view instanceof import_obsidian6.MarkdownView) {
        const file = view.file;
        if (file) {
          await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
            if (!frontmatter.tags) {
              frontmatter.tags = [];
            }
            if (!frontmatter.tags.includes(tag)) {
              frontmatter.tags.push(tag);
            }
          });
        }
      }
    }
  }
  async removeTagFromTabs(leaves, tag) {
    for (const leaf of leaves) {
      const view = leaf.view;
      if (view instanceof import_obsidian6.MarkdownView) {
        const file = view.file;
        if (file) {
          await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
            if (frontmatter.tags && frontmatter.tags.includes(tag)) {
              frontmatter.tags.remove(tag);
            }
          });
        }
      }
    }
  }
  async renameTagInTabs(leaves, oldTag, newTag) {
    for (const leaf of leaves) {
      const view = leaf.view;
      if (view instanceof import_obsidian6.MarkdownView) {
        const file = view.file;
        if (file) {
          await this.app.fileManager.processFrontMatter(file, (frontmatter) => {
            if (frontmatter.tags && frontmatter.tags.includes(oldTag)) {
              const index = frontmatter.tags.indexOf(oldTag);
              frontmatter.tags[index] = newTag;
            }
          });
        }
      }
    }
  }
};
